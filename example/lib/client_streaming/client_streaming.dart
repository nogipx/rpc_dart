import 'dart:async';
import 'package:rpc_dart/rpc_dart.dart';
import 'client_streaming_contract.dart';
import 'client_streaming_models.dart';

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–ø–æ—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ -> –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç)
/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —á–∞—Å—Ç—è–º–∏
Future<void> main({bool debug = false}) async {
  print('=== –ü—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ RPC ===\n');

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
  final clientTransport = MemoryTransport('client');
  final serverTransport = MemoryTransport('server');

  // –°–æ–µ–¥–∏–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –º–µ–∂–¥—É —Å–æ–±–æ–π
  clientTransport.connect(serverTransport);
  serverTransport.connect(clientTransport);
  print('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω—ã');

  // –°–æ–∑–¥–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å –º–µ—Ç–∫–∞–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  final client = RpcEndpoint(
    transport: clientTransport,
    serializer: JsonSerializer(),
    debugLabel: 'client',
  );
  final server = RpcEndpoint(
    transport: serverTransport,
    serializer: JsonSerializer(),
    debugLabel: 'server',
  );
  print('–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã');

  // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  if (debug) {
    server.addMiddleware(DebugMiddleware(id: "server"));
    client.addMiddleware(DebugMiddleware(id: "client"));
  } else {
    server.addMiddleware(LoggingMiddleware(id: "server"));
    client.addMiddleware(LoggingMiddleware(id: 'client'));
  }

  try {
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    final streamService = ServerStreamService();
    server.registerServiceContract(streamService);
    print('–°–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    final clientStreamService = ClientStreamService(client);
    client.registerServiceContract(clientStreamService);
    print('–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    await demonstrateDataBlocks(clientStreamService);
  } catch (e) {
    print('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: $e');
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    await client.close();
    await server.close();
    print('\n–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã');
  }

  print('\n=== –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω ===');
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
Future<void> demonstrateDataBlocks(ClientStreamService streamService) async {
  print('\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —á–∞—Å—Ç—è–º–∏ ===\n');

  print('üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...');

  // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π (—á–∞–Ω–∫–æ–≤)
  final fileChunks = [
    DataBlock(
      index: 1,
      data: List.generate(500, (i) => i % 256), // –ü–µ—Ä–≤—ã–π —á–∞–Ω–∫ —Ñ–∞–π–ª–∞
      metadata: 'my_document.pdf', // –ò–º—è —Ñ–∞–π–ª–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–≤–æ–≥–æ —á–∞–Ω–∫–∞
    ),
    DataBlock(index: 2, data: List.generate(800, (i) => i % 256)), // –í—Ç–æ—Ä–æ–π —á–∞–Ω–∫
    DataBlock(index: 3, data: List.generate(1200, (i) => i % 256)), // –¢—Ä–µ—Ç–∏–π —á–∞–Ω–∫
    DataBlock(index: 4, data: List.generate(300, (i) => i % 256)), // –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
  ];

  try {
    print('üîÑ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞...');

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å—Ç—Ä–∏–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–ª–æ–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    final processStream = await streamService.processDataBlocks(
      RpcClientStreamParams<DataBlock, DataBlockResult>(
        metadata: {},
        streamId: 'file-upload-stream',
      ),
    );

    print('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —á–∞—Å—Ç—è–º–∏...');

    // –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–æ–º
    final controller = processStream.controller;
    if (controller == null) {
      throw RpcInvalidArgumentException('–°–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–æ—Ç–æ–∫–∞');
    }
    var totalSent = 0;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for (final chunk in fileChunks) {
      controller.add(chunk);
      totalSent += chunk.data.length;
      print('  üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–ª–æ–∫ #${chunk.index}: ${chunk.data.length} –±–∞–π—Ç');

      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
      await Future.delayed(Duration(milliseconds: 100));
    }

    print('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ ($totalSent –±–∞–π—Ç)');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
    await controller.close();
    print('üîí –ö–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫—Ä—ã—Ç');

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    final result = await processStream.response;
    if (result != null) {
      print('\nüì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
      print('  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–ª–æ–∫–æ–≤: ${result.blockCount}');
      print('  ‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${result.totalSize} –±–∞–π—Ç');
      print('  ‚Ä¢ –ò–º—è —Ñ–∞–π–ª–∞: ${result.metadata}');
      print('  ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.processingTime}');
    } else {
      print('\n‚ö†Ô∏è –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö');
    }
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: $e');
  }
}
