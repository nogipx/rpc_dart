import 'package:rpc_dart/rpc_dart.dart';

import 'calculator/_index.dart';

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
Future<void> main() async {
  // –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
  final transport1 = MemoryTransport('client');
  final transport2 = MemoryTransport('server');

  // –°–æ–µ–¥–∏–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
  transport1.connect(transport2);
  transport2.connect(transport1);

  final serializer = JsonSerializer();
  final client = RpcEndpoint(transport1, serializer);
  final server = RpcEndpoint(transport2, serializer);

  // // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞
  // client.addMiddleware(DebugMiddleware(id: 'client'));
  // server.addMiddleware(DebugMiddleware(id: 'server'));

  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞
  final serverContract = ServerCalculatorContract();

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  client.registerContract(serverContract);
  server.registerContract(serverContract);

  // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞
  client.addMiddleware(LoggingMiddleware(
    logger: (message) => print(message),
  ));
  server.addMiddleware(LoggingMiddleware(
    logger: (message) => print(message),
  ));
  server.addMiddleware(
    TimingMiddleware(
      onTiming: (message, duration) => print(
        'üïí –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $message - ${duration.inMilliseconds}ms',
      ),
    ),
  );

  await testCalculatorService(client, serverContract.serviceName);

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
  await client.close();
  await server.close();
}

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
Future<void> testCalculatorService(
  RpcEndpoint endpoint,
  String serviceName,
) async {
  final calculator = ClientCalculatorContract(endpoint);

  try {
    print('–¢–µ—Å—Ç 1: –£–Ω–∞—Ä–Ω—ã–π –º–µ—Ç–æ–¥ - —Å–ª–æ–∂–µ–Ω–∏–µ');
    final addRequest = CalculatorRequest(10, 5);
    final addResponse = await calculator.add(addRequest);
    print(
      '–†–µ–∑—É–ª—å—Ç–∞—Ç: ${addRequest.a} + ${addRequest.b} = ${addResponse.result}',
    );
  } catch (e) {
    print('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —É–Ω–∞—Ä–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: $e');
  }

  print('\n');

  try {
    // –î–æ–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç —É–º–Ω–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –ø—Ä–∏–º–µ—Ä–∞
    print('–¢–µ—Å—Ç 2: –£–Ω–∞—Ä–Ω—ã–π –º–µ—Ç–æ–¥ - —É–º–Ω–æ–∂–µ–Ω–∏–µ');
    final multiplyRequest = CalculatorRequest(7, 8);
    final multiplyResponse = await calculator.multiply(multiplyRequest);
    print(
      '–†–µ–∑—É–ª—å—Ç–∞—Ç: ${multiplyRequest.a} √ó ${multiplyRequest.b} = ${multiplyResponse.result}',
    );
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —É–Ω–∞—Ä–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: $e');
  }

  print('\n');

  // –¢–µ—Å—Ç 3: –°—Ç—Ä–∏–º–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
  try {
    print('–¢–µ—Å—Ç 3: –°—Ç—Ä–∏–º–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö');
    final sequenceRequest = SequenceRequest(4);
    final numbers = <int>[];

    final stream = calculator.generateSequence(sequenceRequest);

    await for (final number in stream) {
      numbers.add(number.count);
    }

    print('–°—Ç—Ä–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: $numbers');
  } catch (e) {
    print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–µ: $e');
  }
}
