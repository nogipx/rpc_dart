// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

/// üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ protobuf —Å RPC –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π
///
/// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
/// —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ protobuf –∫–ª–∞—Å—Å—ã —Å RPC –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π

import 'dart:async';
import 'package:rpc_dart/contracts/base.dart';
import 'package:rpc_dart/rpc/_index.dart';
import 'package:rpc_dart/logger.dart';
import 'package:rpc_example/generated/user_service.pb.dart';
import 'package:rpc_example/protobuf_extensions.dart';
import 'package:rpc_example/protobuf_user_service.dart';

/// ============================================
/// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò
/// ============================================

Future<void> main() async {
  print('üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ protobuf —Å RPC –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π');
  print('=' * 60);

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  RpcLoggerSettings.setDefaultMinLogLevel(RpcLoggerLevel.debug);

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –ø–∞–º—è—Ç–∏
  print('\nüì° –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –ø–∞–º—è—Ç–∏...');
  final (clientTransport, serverTransport) = RpcInMemoryTransport.pair();

  // –°–æ–∑–¥–∞–µ–º endpoint'—ã
  final clientEndpoint = RpcEndpoint(
    transport: clientTransport,
    debugLabel: 'ProtobufClient',
  );

  final serverEndpoint = RpcEndpoint(
    transport: serverTransport,
    debugLabel: 'ProtobufServer',
  );

  ProtobufUserServiceServer? server;

  try {
    // –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä
    print('\nüîß –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä...');
    server = ProtobufUserServiceServer();
    server.addTestUsers(); // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å–µ—Ä–≤–∏—Å–∞ (—Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
    serverEndpoint.registerServiceContract(server);

    // –í—Ä—É—á–Ω—É—é –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    server.setupServers(serverEndpoint.transport, serverEndpoint.logger);

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    print('\nüîß –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç...');
    clientEndpoint.registerServiceContract(ProtobufUserServiceServer()); // –î–ª—è —Ç–∏–ø–æ–≤
    final client = ProtobufUserServiceClient(clientEndpoint);

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    await Future.delayed(Duration(milliseconds: 100));

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –≤—ã–∑–æ–≤–æ–≤
    await _demonstrateUnaryCall(client);
    await _demonstrateClientStream(client);
    await _demonstrateServerStream(client);
    await _demonstrateBidirectionalStream(client);

    print('\n‚úÖ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (e, stackTrace) {
    print('\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: $e');
    print('Stack trace: $stackTrace');
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    print('\nüîß –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã...');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –±—ã–ª —Å–æ–∑–¥–∞–Ω
    try {
      if (server != null) {
        await server.closeServers();
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤: $e');
    }

    await clientEndpoint.close();
    await serverEndpoint.close();
  }

  print('\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

/// ============================================
/// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–ù–ê–†–ù–´–• –í–´–ó–û–í–û–í
/// ============================================

Future<void> _demonstrateUnaryCall(ProtobufUserServiceClient client) async {
  print('\n' + '=' * 50);
  print('üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–ù–ê–†–ù–´–• –í–´–ó–û–í–û–í');
  print('=' * 50);

  try {
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print('\nüì§ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    final createRequest = RpcCreateUserRequest.create(
      name: '–ü—Ä–æ—Ç–æ–±—É—Ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      email: 'protobuf@example.com',
      tags: ['protobuf', 'rpc', 'test'],
    );

    print('   üêõ DEBUG: –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω, –≤—ã–∑—ã–≤–∞–µ–º client.createUser...');
    final createResponse = await client.createUser(createRequest);
    print('   üêõ DEBUG: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç createUser!');

    if (createResponse.success && createResponse.user != null) {
      final user = createResponse.user!;
      print('   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${user.name} (ID: ${user.id})');
      print('   üìß Email: ${user.email}');
      print('   üè∑Ô∏è  Tags: ${user.tags.join(', ')}');
      print('   üìä Status: ${user.status}');

      // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      print('\nüì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

      final getUserRequest = RpcGetUserRequest.create(
        userId: user.id,
        includeTags: true,
      );

      final getUserResponse = await client.getUser(getUserRequest);

      if (getUserResponse.success && getUserResponse.user != null) {
        final fetchedUser = getUserResponse.user!;
        print('   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω: ${fetchedUser.name}');
        print('   üìß Email: ${fetchedUser.email}');
        print('   üè∑Ô∏è  Tags: ${fetchedUser.tags.join(', ')}');
        print(
            '   üìÖ –°–æ–∑–¥–∞–Ω: ${DateTime.fromMillisecondsSinceEpoch(fetchedUser.createdAt.toInt())}');
      } else {
        print('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${getUserResponse.errorMessage}');
      }
    } else {
      print('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${createResponse.errorMessage}');
    }

    // 3. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print('\nüì• –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    final nonExistentRequest = RpcGetUserRequest.create(
      userId: 999,
      includeTags: false,
    );

    final nonExistentResponse = await client.getUser(nonExistentRequest);

    if (!nonExistentResponse.success) {
      print('   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: ${nonExistentResponse.errorMessage}');
    } else {
      print('   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω');
    }
  } catch (e) {
    print('   ‚ùå –û—à–∏–±–∫–∞ —É–Ω–∞—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞: $e');
  }
}

/// ============================================
/// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–°–ö–û–ì–û –°–¢–†–ò–ú–ê
/// ============================================

Future<void> _demonstrateClientStream(ProtobufUserServiceClient client) async {
  print('\n' + '=' * 50);
  print('üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–°–ö–û–ì–û –°–¢–†–ò–ú–ê');
  print('=' * 50);

  try {
    print('\nüì§ –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø–æ—Ç–æ–∫...');

    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    final userRequests = [
      RpcCreateUserRequest.create(
        name: '–ê–Ω–Ω–∞',
        email: 'anna@example.com',
        tags: ['hr', 'manager'],
      ),
      RpcCreateUserRequest.create(
        name: '–°–µ—Ä–≥–µ–π',
        email: 'sergey@example.com',
        tags: ['developer', 'backend'],
      ),
      RpcCreateUserRequest.create(
        name: '–ú–∞—Ä–∏—è',
        email: 'maria@example.com',
        tags: ['designer', 'frontend'],
      ),
      RpcCreateUserRequest.create(
        name: '', // –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è - –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É
        email: 'invalid@example.com',
        tags: ['test'],
      ),
      RpcCreateUserRequest.create(
        name: '–ò–≤–∞–Ω',
        email: 'invalid-email', // –ù–µ–≤–µ—Ä–Ω—ã–π email - –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É
        tags: ['tester'],
      ),
      RpcCreateUserRequest.create(
        name: '–ï–ª–µ–Ω–∞',
        email: 'elena@example.com',
        tags: ['analyst', 'data'],
      ),
    ];

    print('   üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${userRequests.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');

    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    final requestStream = Stream.fromIterable(userRequests).asyncMap((request) async {
      await Future.delayed(Duration(milliseconds: 100)); // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
      print('   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: ${request.name} (${request.email})');
      return request;
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å –ø–æ—Ç–æ–∫ –∏ –ø–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print('\n‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∂–¥–µ–º –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞...');
    final response = await client.batchCreateUsers(requestStream);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:');
    print('   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: ${response.totalCreated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    print('   ‚ùå –û—à–∏–±–æ–∫: ${response.totalErrors}');
    print('   üìà –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${response.success ? "–£–°–ü–ï–•" : "–ï–°–¢–¨ –û–®–ò–ë–ö–ò"}');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (response.users.isNotEmpty) {
      print('\nüë• –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
      for (int i = 0; i < response.users.length; i++) {
        final user = response.users[i];
        print('   ${i + 1}. üë§ ${user.name} (ID: ${user.id})');
        print('      üìß ${user.email}');
        print('      üè∑Ô∏è  [${user.tags.join(', ')}]');
        print('      üìä ${user.status}');
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (response.errorMessages.isNotEmpty) {
      print('\n‚ö†Ô∏è  –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:');
      for (int i = 0; i < response.errorMessages.length; i++) {
        print('   ${i + 1}. ${response.errorMessages[i]}');
      }
    }

    print('\n   ‚úÖ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å—Ç—Ä–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  } catch (e) {
    print('   ‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å—Ç—Ä–∏–º–∞: $e');
  }
}

/// ============================================
/// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ï–†–í–ï–†–ù–û–ì–û –°–¢–†–ò–ú–ê
/// ============================================

Future<void> _demonstrateServerStream(ProtobufUserServiceClient client) async {
  print('\n' + '=' * 50);
  print('üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ï–†–í–ï–†–ù–û–ì–û –°–¢–†–ò–ú–ê');
  print('=' * 50);

  try {
    print('\nüì§ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    final listRequest = RpcListUsersRequest.create(
      limit: 5,
      offset: 0,
      statusFilter: UserStatus.ACTIVE,
    );

    print('   üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: limit=${listRequest.limit}, offset=${listRequest.offset}');
    print('   üîç –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É: ${listRequest.statusFilter}');

    final responseStream = client.listUsers(listRequest);
    int receivedCount = 0;

    await for (final response in responseStream) {
      if (response.success) {
        for (final user in response.users) {
          receivedCount++;
          print('   üì• –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #$receivedCount:');
          print('      üë§ ${user.name} (ID: ${user.id})');
          print('      üìß ${user.email}');
          print('      üìä ${user.status}');
          print('      üè∑Ô∏è  [${user.tags.join(', ')}]');
        }

        if (response.hasMore) {
          print('   ÔøΩÔøΩ –î–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏...');
        } else {
          print('   üìÑ –≠—Ç–æ –≤—Å–µ –∑–∞–ø–∏—Å–∏');
        }
      } else {
        print('   ‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞');
      }
    }

    print('   ‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–π —Å—Ç—Ä–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ $receivedCount –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  } catch (e) {
    print('   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞: $e');
  }
}

/// ============================================
/// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–í–£–ù–ê–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –°–¢–†–ò–ú–ê
/// ============================================

Future<void> _demonstrateBidirectionalStream(ProtobufUserServiceClient client) async {
  print('\n' + '=' * 50);
  print('üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–í–£–ù–ê–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –°–¢–†–ò–ú–ê');
  print('=' * 50);

  try {
    print('\nüì° –°–æ–∑–¥–∞–µ–º –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç—Ä–∏–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    final requestController = StreamController<RpcWatchUsersRequest>();
    final requestStream = requestController.stream;

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    final responseStream = client.watchUsers(requestStream);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ
    final completer = Completer<void>();
    int eventCount = 0;
    final int maxEvents = 6; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π

    final subscription = responseStream.listen(
      (response) {
        if (response.success) {
          final event = response.event;
          eventCount++;

          print('   üì• –°–æ–±—ã—Ç–∏–µ #$eventCount:');
          print('      üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${event.userId}');
          print('      üéØ –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: ${event.eventType}');
          print('      üìä –î–∞–Ω–Ω—ã–µ: ${event.data}');
          print('      ‚è∞ –í—Ä–µ–º—è: ${DateTime.fromMillisecondsSinceEpoch(event.timestamp.toInt())}');

          // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±—ã—Ç–∏–π
          if (eventCount >= maxEvents) {
            completer.complete();
          }
        } else {
          print('   ‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–±—ã—Ç–∏–∏');
        }
      },
      onError: (e) {
        print('   ‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∞ —Å–æ–±—ã—Ç–∏–π: $e');
        if (!completer.isCompleted) {
          completer.completeError(e);
        }
      },
      onDone: () {
        print('   ‚úÖ –°—Ç—Ä–∏–º —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω');
        if (!completer.isCompleted) {
          completer.complete();
        }
      },
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    final watchRequests = [
      RpcWatchUsersRequest.create(
        userIds: [1, 2],
        eventTypes: ['USER_ACTIVITY', 'USER_UPDATE'],
      ),
      RpcWatchUsersRequest.create(
        userIds: [3],
        eventTypes: ['USER_ACTIVITY'],
      ),
    ];

    print('\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ...');

    for (int i = 0; i < watchRequests.length; i++) {
      final request = watchRequests[i];
      print('   üì§ –ó–∞–ø—Ä–æ—Å #${i + 1}: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ${request.userIds}');
      requestController.add(request);

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await Future.delayed(Duration(milliseconds: 500));
    }

    // –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    print('\n‚è≥ –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    await completer.future.timeout(
      Duration(seconds: 10),
      onTimeout: () {
        print('   ‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π');
      },
    );

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º –∑–∞–ø—Ä–æ—Å–æ–≤
    print('\nüîö –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤...');
    await requestController.close();
    await subscription.cancel();

    print('   ‚úÖ –î–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç—Ä–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ $eventCount —Å–æ–±—ã—Ç–∏–π');
  } catch (e) {
    print('   ‚ùå –û—à–∏–±–∫–∞ –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞: $e');
  }
}
