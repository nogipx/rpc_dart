syntax = "proto3";

package user_service;

// Базовая информация о пользователе
message User {
  int32 id = 1;
  string name = 2;
  string email = 3;
  repeated string tags = 4;
  UserStatus status = 5;
  int64 created_at = 6;
}

// Статус пользователя
enum UserStatus {
  UNKNOWN = 0;
  ACTIVE = 1;
  INACTIVE = 2;
  BANNED = 3;
}

// Запрос на получение пользователя
message GetUserRequest {
  int32 user_id = 1;
  bool include_tags = 2;
}

// Ответ с информацией о пользователе
message GetUserResponse {
  User user = 1;
  bool success = 2;
  string errorMessage = 3;
}

// Запрос на создание пользователя
message CreateUserRequest {
  string name = 1;
  string email = 2;
  repeated string tags = 3;
}

// Ответ на создание пользователя
message CreateUserResponse {
  User user = 1;
  bool success = 2;
  string errorMessage = 3;
}

// Ответ на пакетное создание пользователей (для client streaming)
message BatchCreateUsersResponse {
  repeated User users = 1;          // Созданные пользователи
  int32 totalCreated = 2;           // Общее количество созданных
  int32 totalErrors = 3;            // Количество ошибок
  repeated string errorMessages = 4; // Сообщения об ошибках
  bool success = 5;                 // Общий статус операции
}

// Запрос на получение списка пользователей (для серверного стрима)
message ListUsersRequest {
  int32 limit = 1;
  int32 offset = 2;
  UserStatus status_filter = 3;
}

// Ответ со списком пользователей
message ListUsersResponse {
  repeated User users = 1;
  bool has_more = 2;
}

// Запрос для отслеживания пользователей (для двунаправленного стрима) 
message WatchUsersRequest {
  repeated int32 user_ids = 1;
  repeated string event_types = 2;
}

// События пользователей
message UserEvent {
  int32 user_id = 1;
  string event_type = 2;
  map<string, string> data = 3;
  int64 timestamp = 4;
}

// Ответ с событием пользователя
message UserEventResponse {
  UserEvent event = 1;
  bool success = 2;
} 