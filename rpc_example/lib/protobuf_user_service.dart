// // SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
// //
// // SPDX-License-Identifier: LGPL-3.0-or-later

// /// üéØ –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å protobuf
// library;

// import 'dart:async';
// import 'package:fixnum/fixnum.dart';
// import 'package:rpc_dart/contracts/base.dart';
// import 'package:rpc_dart/contracts/rpc_service_contract.dart';
// import 'package:rpc_dart/rpc/_index.dart';
// import 'package:rpc_dart/logger.dart';

// import 'generated/user_service.pb.dart';
// import 'protobuf_extensions.dart';

// /// –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º protobuf —Ç–∏–ø–æ–≤
// abstract class ProtobufUserServiceContract extends RpcServiceContract {
//   static const methodGetUser = 'getUser';
//   static const methodCreateUser = 'createUser';
//   static const methodBatchCreateUsers = 'batchCreateUsers';
//   static const methodListUsers = 'listUsers';
//   static const methodWatchUsers = 'watchUsers';

//   ProtobufUserServiceContract() : super('ProtobufUserService');

//   @override
//   void setup() {
//     // –£–Ω–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
//     addUnaryMethod<RpcGetUserRequest, RpcGetUserResponse>(
//       methodName: methodGetUser,
//       handler: getUser,
//       description: '–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (protobuf)',
//       metadata: const RpcMethodMetadata(
//         timeout: Duration(seconds: 5),
//         cacheable: true,
//       ),
//     );

//     addUnaryMethod<RpcCreateUserRequest, RpcCreateUserResponse>(
//       methodName: methodCreateUser,
//       handler: createUser,
//       description: '–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (protobuf)',
//       metadata: const RpcMethodMetadata(
//         requiresAuth: true,
//         permissions: ['user.create'],
//       ),
//     );

//     // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å—Ç—Ä–∏–º
//     addClientStreamMethod<RpcCreateUserRequest, RpcBatchCreateUsersResponse>(
//       methodName: methodBatchCreateUsers,
//       handler: batchCreateUsers,
//       description: '–°–æ–∑–¥–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø–æ—Ç–æ–∫ (protobuf)',
//       metadata: const RpcMethodMetadata(
//         requiresAuth: true,
//         permissions: ['user.batch_create'],
//         timeout: Duration(seconds: 60),
//       ),
//     );

//     // –°–µ—Ä–≤–µ—Ä–Ω—ã–π —Å—Ç—Ä–∏–º
//     addServerStreamMethod<RpcListUsersRequest, RpcListUsersResponse>(
//       methodName: methodListUsers,
//       handler: listUsers,
//       description: '–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Ç–æ–∫–æ–º (protobuf)',
//       metadata: const RpcMethodMetadata(
//         timeout: Duration(seconds: 30),
//       ),
//     );

//     // –î–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç—Ä–∏–º
//     addBidirectionalMethod<RpcWatchUsersRequest, RpcUserEventResponse>(
//       methodName: methodWatchUsers,
//       handler: watchUsers,
//       description: '–ù–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (protobuf)',
//       metadata: const RpcMethodMetadata(
//         requiresAuth: true,
//         permissions: ['user.watch'],
//         timeout: Duration(minutes: 30),
//       ),
//     );

//     super.setup();
//   }

//   /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
//   Future<RpcGetUserResponse> getUser(RpcGetUserRequest request);

//   /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//   Future<RpcCreateUserResponse> createUser(RpcCreateUserRequest request);

//   /// –°–æ–∑–¥–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å—Ç—Ä–∏–º
//   Future<RpcBatchCreateUsersResponse> batchCreateUsers(Stream<RpcCreateUserRequest> requests);

//   /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Ç–æ–∫–æ–º
//   Stream<RpcListUsersResponse> listUsers(RpcListUsersRequest request);

//   /// –ù–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
//   Stream<RpcUserEventResponse> watchUsers(Stream<RpcWatchUsersRequest> requests);
// }

// /// –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å protobuf
// class ProtobufUserServiceClient extends ProtobufUserServiceContract {
//   final RpcEndpoint _endpoint;

//   ProtobufUserServiceClient(this._endpoint) {
//     super.setup();
//   }

//   @override
//   Future<RpcGetUserResponse> getUser(RpcGetUserRequest request) {
//     return _endpoint
//         .unaryRequest(
//           serviceName: serviceName,
//           methodName: ProtobufUserServiceContract.methodGetUser,
//         )
//         .call(
//           request: request,
//           responseParser: ProtobufSerializers.getUserResponseParser(),
//         );
//   }

//   @override
//   Future<RpcCreateUserResponse> createUser(RpcCreateUserRequest request) {
//     return _endpoint
//         .unaryRequest(
//           serviceName: serviceName,
//           methodName: ProtobufUserServiceContract.methodCreateUser,
//         )
//         .call(
//           request: request,
//           responseParser: ProtobufSerializers.createUserResponseParser(),
//         );
//   }

//   @override
//   Future<RpcBatchCreateUsersResponse> batchCreateUsers(Stream<RpcCreateUserRequest> requests) {
//     return _endpoint
//         .clientStream(
//           serviceName: serviceName,
//           methodName: ProtobufUserServiceContract.methodBatchCreateUsers,
//         )
//         .call(
//           requests: requests,
//           responseParser: ProtobufSerializers.batchCreateUsersResponseParser(),
//         );
//   }

//   @override
//   Stream<RpcListUsersResponse> listUsers(RpcListUsersRequest request) {
//     return _endpoint
//         .serverStream(
//           serviceName: serviceName,
//           methodName: ProtobufUserServiceContract.methodListUsers,
//         )
//         .call(
//           request: request,
//           responseParser: ProtobufSerializers.listUsersResponseParser(),
//         );
//   }

//   @override
//   Stream<RpcUserEventResponse> watchUsers(Stream<RpcWatchUsersRequest> requests) {
//     return _endpoint
//         .bidirectionalStream(
//           serviceName: serviceName,
//           methodName: ProtobufUserServiceContract.methodWatchUsers,
//         )
//         .call(
//           requests: requests,
//           responseParser: ProtobufSerializers.userEventResponseParser(),
//         );
//   }
// }

// /// –°–µ—Ä–≤–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å protobuf
// class ProtobufUserServiceServer extends ProtobufUserServiceContract {
//   // –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
//   final Map<int, User> _users = {};
//   int _nextId = 1;

//   @override
//   Future<RpcGetUserResponse> getUser(RpcGetUserRequest request) async {
//     print('   üì• ProtobufServer: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å getUser(${request.userId})');

//     final user = _users[request.userId];
//     if (user == null) {
//       return RpcGetUserResponse.create(
//         success: false,
//         errorMessage: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${request.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω',
//       );
//     }

//     return RpcGetUserResponse.create(
//       user: user,
//       success: true,
//     );
//   }

//   @override
//   Future<RpcCreateUserResponse> createUser(RpcCreateUserRequest request) async {
//     print('   üì• ProtobufServer: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å createUser(${request.name})');

//     // –í–∞–ª–∏–¥–∞—Ü–∏—è
//     if (request.name.trim().isEmpty) {
//       return RpcCreateUserResponse.create(
//         success: false,
//         errorMessage: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
//       );
//     }

//     if (!request.email.contains('@')) {
//       return RpcCreateUserResponse.create(
//         success: false,
//         errorMessage: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email',
//       );
//     }

//     // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//     final user = User()
//       ..id = _nextId++
//       ..name = request.name
//       ..email = request.email
//       ..tags.addAll(request.tags)
//       ..status = UserStatus.ACTIVE
//       ..createdAt = Int64(DateTime.now().millisecondsSinceEpoch);

//     _users[user.id] = user;

//     return RpcCreateUserResponse.create(
//       user: user,
//       success: true,
//     );
//   }

//   @override
//   Future<RpcBatchCreateUsersResponse> batchCreateUsers(
//       Stream<RpcCreateUserRequest> requests) async {
//     print('   üì• ProtobufServer: –ü–æ–ª—É—á–µ–Ω –ø–æ—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ batchCreateUsers');

//     final createdUsers = <User>[];
//     final errors = <String>[];
//     var totalProcessed = 0;

//     await for (final request in requests) {
//       totalProcessed++;
//       print('   üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $totalProcessed: ${request.name}');

//       // –í–∞–ª–∏–¥–∞—Ü–∏—è
//       if (request.name.trim().isEmpty) {
//         errors.add('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #$totalProcessed: –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
//         continue;
//       }

//       if (!request.email.contains('@')) {
//         errors.add('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #$totalProcessed: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email "${request.email}"');
//         continue;
//       }

//       // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//       final user = User()
//         ..id = _nextId++
//         ..name = request.name
//         ..email = request.email
//         ..tags.addAll(request.tags)
//         ..status = UserStatus.ACTIVE
//         ..createdAt = Int64(DateTime.now().millisecondsSinceEpoch);

//       _users[user.id] = user;
//       createdUsers.add(user);

//       // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
//       await Future.delayed(Duration(milliseconds: 50));
//     }

//     print(
//         '   ‚úÖ ProtobufServer: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ: ${createdUsers.length}, –æ—à–∏–±–æ–∫: ${errors.length}');

//     return RpcBatchCreateUsersResponse.create(
//       users: createdUsers,
//       totalCreated: createdUsers.length,
//       totalErrors: errors.length,
//       errorMessages: errors,
//       success: errors.isEmpty,
//     );
//   }

//   @override
//   Stream<RpcListUsersResponse> listUsers(RpcListUsersRequest request) async* {
//     print(
//         '   üì• ProtobufServer: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å listUsers(limit: ${request.limit}, offset: ${request.offset})');

//     final allUsers = _users.values.toList();
//     final filteredUsers = request.statusFilter != UserStatus.UNKNOWN
//         ? allUsers.where((user) => user.status == request.statusFilter).toList()
//         : allUsers;

//     // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
//     filteredUsers.sort((a, b) => a.id.compareTo(b.id));

//     final startIndex = request.offset;
//     final endIndex = (startIndex + request.limit).clamp(0, filteredUsers.length);

//     for (int i = startIndex; i < endIndex; i++) {
//       final user = filteredUsers[i];
//       final hasMore = i < filteredUsers.length - 1;

//       print('   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.name} (${i + 1}/${filteredUsers.length})');

//       yield RpcListUsersResponse.create(
//         users: [user],
//         hasMore: hasMore,
//         success: true,
//       );

//       // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å—Ç—Ä–∏–º–∞
//       await Future.delayed(Duration(milliseconds: 100));
//     }

//     print('   ‚úÖ ProtobufServer: listUsers –∑–∞–≤–µ—Ä—à–µ–Ω');
//   }

//   @override
//   Stream<RpcUserEventResponse> watchUsers(Stream<RpcWatchUsersRequest> requests) async* {
//     print('   üì• ProtobufServer: –ó–∞–ø—É—â–µ–Ω watchUsers');

//     await for (final request in requests) {
//       print('   üì° –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: ${request.userIds}');

//       // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//       for (final userId in request.userIds) {
//         // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
//         final eventTypes = request.eventTypes.isEmpty
//             ? ['USER_ACTIVITY', 'USER_UPDATE', 'USER_STATUS_CHANGE']
//             : request.eventTypes;

//         for (final eventType in eventTypes) {
//           final event = UserEvent()
//             ..userId = userId
//             ..eventType = eventType
//             ..data.addAll(_generateEventData(eventType, userId))
//             ..timestamp = Int64(DateTime.now().millisecondsSinceEpoch);

//           print('   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ: $eventType –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');

//           yield RpcUserEventResponse.create(
//             event: event,
//             success: true,
//           );

//           // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
//           await Future.delayed(Duration(milliseconds: 200));
//         }
//       }
//     }

//     print('   ‚úÖ ProtobufServer: watchUsers –∑–∞–≤–µ—Ä—à–µ–Ω');
//   }

//   /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
//   Map<String, String> _generateEventData(String eventType, int userId) {
//     switch (eventType) {
//       case 'USER_ACTIVITY':
//         return {
//           'action': 'login',
//           'timestamp': DateTime.now().toIso8601String(),
//           'ip_address': '192.168.1.${userId % 255}'
//         };
//       case 'USER_UPDATE':
//         return {
//           'field': 'last_seen',
//           'old_value': DateTime.now().subtract(Duration(hours: 1)).toIso8601String(),
//           'new_value': DateTime.now().toIso8601String()
//         };
//       case 'USER_STATUS_CHANGE':
//         return {'old_status': 'INACTIVE', 'new_status': 'ACTIVE', 'reason': 'user_login'};
//       default:
//         return {
//           'event_type': eventType,
//           'user_id': userId.toString(),
//           'timestamp': DateTime.now().toIso8601String()
//         };
//     }
//   }

//   /// –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
//   void addTestUsers() {
//     final testUsers = [
//       User()
//         ..id = _nextId++
//         ..name = '–ê–ª–∏—Å–∞'
//         ..email = 'alice@example.com'
//         ..tags.addAll(['admin', 'developer'])
//         ..status = UserStatus.ACTIVE
//         ..createdAt = Int64(DateTime.now().subtract(Duration(days: 10)).millisecondsSinceEpoch),
//       User()
//         ..id = _nextId++
//         ..name = '–ë–æ–±'
//         ..email = 'bob@example.com'
//         ..tags.addAll(['user', 'tester'])
//         ..status = UserStatus.ACTIVE
//         ..createdAt = Int64(DateTime.now().subtract(Duration(days: 5)).millisecondsSinceEpoch),
//       User()
//         ..id = _nextId++
//         ..name = '–ö–ª—ç—Ä'
//         ..email = 'claire@example.com'
//         ..tags.addAll(['manager', 'analyst'])
//         ..status = UserStatus.INACTIVE
//         ..createdAt = Int64(DateTime.now().subtract(Duration(days: 1)).millisecondsSinceEpoch),
//     ];

//     for (final user in testUsers) {
//       _users[user.id] = user;
//     }

//     print('   üîß –î–æ–±–∞–≤–ª–µ–Ω–æ ${testUsers.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
//   }

//   /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ—Ä–µ–∑ lazy —Ä–æ—É—Ç–µ—Ä
//   Future<void> setupServers(IRpcTransport transport, RpcLogger logger) async {
//     // üéØ NEW: –ë–æ–ª—å—à–µ –Ω–µ —Å–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã –≤—Ä—É—á–Ω—É—é!
//     // Lazy —Ä–æ—É—Ç–µ—Ä —Å–æ–∑–¥–∞—Å—Ç –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
//     logger.info('–°–µ—Ä–≤–µ—Ä—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ lazy —Ä–æ—É—Ç–µ—Ä');
//   }

//   /// –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
//   Future<void> closeServers() async {
//     // üéØ NEW: –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ RpcEndpoint.close()
//     print('   üîß –°–µ—Ä–≤–µ—Ä—ã ProtobufUserService –±—É–¥—É—Ç –∑–∞–∫—Ä—ã—Ç—ã —á–µ—Ä–µ–∑ RpcEndpoint');
//   }
// }
