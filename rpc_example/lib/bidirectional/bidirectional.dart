import 'dart:async';

import 'package:rpc_dart/rpc_dart.dart';

import 'bidirectional_contract.dart';
import 'bidirectional_models.dart';

/// –ò–º—è –º–µ—Ç–æ–¥–∞ –¥–ª—è —á–∞—Ç–∞
const chatMethod = 'chat';

/// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –ª–æ–≥–æ–≤
final RpcLogger _logger = RpcLogger('BiDirectionalExample');

/// –ü—Ä–∏–º–µ—Ä –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–ø–æ—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ <-> –ø–æ—Ç–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤)
/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —á–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
Future<void> main({bool debug = false}) async {
  printHeader('–ü—Ä–∏–º–µ—Ä –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (—á–∞—Ç)');

  // –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
  final endpoints = setupEndpoints();
  final serverEndpoint = endpoints.server;
  final clientEndpoint = endpoints.client;

  // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  if (debug) {
    serverEndpoint.addMiddleware(DebugMiddleware(_logger));
    clientEndpoint.addMiddleware(DebugMiddleware(_logger));
  } else {
    serverEndpoint.addMiddleware(LoggingMiddleware(RpcLogger('server')));
    clientEndpoint.addMiddleware(LoggingMiddleware(RpcLogger('client')));
  }
  _logger.info('–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

  try {
    // –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –∏ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç-—Å–µ—Ä–≤–∏—Å–∞
    final serverContract = ServerChatService();
    final clientContract = ClientChatService(clientEndpoint);

    serverEndpoint.registerServiceContract(serverContract);
    clientEndpoint.registerServiceContract(clientContract);
    _logger.info('–°–µ—Ä–≤–∏—Å—ã —á–∞—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —á–∞—Ç–∞
    await demonstrateChatExample(clientContract);
  } catch (e) {
    _logger.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', error: {'error': e.toString()});
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    await clientEndpoint.close();
    await serverEndpoint.close();
    _logger.info('–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã');
  }

  printHeader('–ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
}

/// –ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
void printHeader(String title) {
  _logger.info('-------------------------');
  _logger.info(' $title');
  _logger.info('-------------------------');
}

/// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
({RpcEndpoint server, RpcEndpoint client}) setupEndpoints() {
  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  final serverTransport = MemoryTransport("server");
  final clientTransport = MemoryTransport("client");

  // –°–æ–µ–¥–∏–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –º–µ–∂–¥—É —Å–æ–±–æ–π
  serverTransport.connect(clientTransport);
  clientTransport.connect(serverTransport);

  // –°–æ–∑–¥–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å –º–µ—Ç–∫–∞–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  final serverEndpoint = RpcEndpoint(
    transport: serverTransport,
    debugLabel: "server",
  );
  final clientEndpoint = RpcEndpoint(
    transport: clientTransport,
    debugLabel: "client",
  );

  return (server: serverEndpoint, client: clientEndpoint);
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —á–∞—Ç–∞
Future<void> demonstrateChatExample(ClientChatService chatService) async {
  printHeader('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —á–∞—Ç–∞');

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  final userName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  _logger.info('üë§ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —á–∞—Ç—É –∫–∞–∫ "$userName"');

  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —á–∞—Ç–∞
  final bidiStream = chatService.chatHandler();

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  final subscription = bidiStream.listen(
    (message) {
      final timestamp =
          message.timestamp != null
              ? '${message.timestamp!.substring(11, 19)} '
              : '';

      String formattedMessage = ''; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      switch (message.type) {
        case MessageType.system:
          formattedMessage = 'üîß $timestamp${message.text}';
          break;
        case MessageType.info:
          formattedMessage = '‚ÑπÔ∏è $timestamp${message.text}';
          break;
        case MessageType.action:
          formattedMessage = '‚ö° $timestamp${message.sender} ${message.text}';
          break;
        case MessageType.text:
          if (message.sender == userName) {
            formattedMessage = '‚Ü™Ô∏è $timestamp${message.text}';
          } else {
            formattedMessage = '${message.sender}: ${message.text}';
          }
          break;
      }

      _logger.info(formattedMessage);
    },
    onError: (e) => _logger.error('–û—à–∏–±–∫–∞', error: {'error': e.toString()}),
    onDone: () => _logger.info('üîö –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ'),
  );

  // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await Future.delayed(Duration(milliseconds: 1500));

  final messages = [
    '–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    '–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º —á–∞—Ç–æ–º?',
    '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!',
    '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è',
  ];

  for (final text in messages) {
    await Future.delayed(Duration(milliseconds: 1500));

    final chatMessage = ChatMessage(
      sender: userName,
      text: text,
      type: MessageType.text,
      timestamp: DateTime.now().toIso8601String(),
    );

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ send() –∫–ª–∞—Å—Å–∞ BidiStream –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    bidiStream.send(chatMessage);
    _logger.info('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: $text');
  }

  // –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
  await Future.delayed(Duration(seconds: 3));

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –∏ –ø–æ–¥–ø–∏—Å–∫—É
  await bidiStream.close();
  await subscription.cancel();

  printHeader('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}
