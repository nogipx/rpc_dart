import 'dart:async';
import 'package:rpc_dart/rpc_dart.dart';
import 'package:rpc_dart/diagnostics.dart';

import 'server_streaming_models.dart';

final _logger = RpcLogger('ServerStreamingExample');

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å -> –ø–æ—Ç–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤)
/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏
Future<void> main({bool debug = true}) async {
  printHeader('–ü—Ä–∏–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞');

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –≤ –ø–∞–º—è—Ç–∏
  final clientTransport = MemoryTransport('client');
  final serverTransport = MemoryTransport('server');

  // –°–æ–µ–¥–∏–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
  clientTransport.connect(serverTransport);
  serverTransport.connect(clientTransport);

  // –°–æ–∑–¥–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å –º–µ—Ç–∫–∞–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  final client = RpcEndpoint(transport: clientTransport, debugLabel: 'client');
  final server = RpcEndpoint(transport: serverTransport, debugLabel: 'server');

  if (debug) {
    server.addMiddleware(DebugMiddleware(RpcLogger('server')));
    client.addMiddleware(DebugMiddleware(RpcLogger('client')));
  } else {
    server.addMiddleware(LoggingMiddleware(RpcLogger('server')));
    client.addMiddleware(LoggingMiddleware(RpcLogger('client')));
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–¥–∞—á
  final serverContract = ServerTaskService();
  final clientContract = ClientTaskService(client);

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  server.registerServiceContract(serverContract);
  client.registerServiceContract(clientContract);

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞—á–∏
  await demonstrateTaskProgress(client);

  printHeader('–ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
}

abstract class TaskServiceContract extends RpcServiceContract {
  TaskServiceContract() : super('TaskService');

  static const String methodName = 'startTask';

  @override
  void setup() {
    addServerStreamingMethod(
      methodName: methodName,
      handler: handler,
      argumentParser: TaskRequest.fromJson,
      responseParser: ProgressMessage.fromJson,
    );
    super.setup();
  }

  ServerStreamingBidiStream<TaskRequest, ProgressMessage> handler(
    TaskRequest request,
  );
}

class ServerTaskService extends TaskServiceContract {
  @override
  ServerStreamingBidiStream<TaskRequest, ProgressMessage> handler(
    TaskRequest request,
  ) {
    _logger.info(
      '–°–µ—Ä–≤–µ—Ä: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–¥–∞—á—É "${request.taskName}" (ID: ${request.taskId})',
    );

    final bidiStream =
        BidiStreamGenerator<TaskRequest, ProgressMessage>((requests) async* {
          final int steps = request.steps;
          final List<String> stages = [
            'initializing',
            'in_progress',
            'processing',
            'analyzing',
            'in_progress',
          ];
          final List<String> messages = [
            '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞...',
            '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...',
            '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...',
            '–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...',
            '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...',
            '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...',
            '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤...',
            '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...',
            '–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...',
            '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...',
          ];

          // –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
          yield ProgressMessage(
            taskId: request.taskId,
            progress: 0,
            status: 'initializing',
            message: '–ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é...',
          );

          await Future.delayed(Duration(milliseconds: 500));

          // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
          for (int i = 1; i <= steps; i++) {
            final progress = (i / steps * 100).round();
            final stageIndex = i % stages.length;
            final messageIndex = i - 1;
            final status = i == steps ? 'completed' : stages[stageIndex];
            final message =
                i == steps
                    ? '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${(3000 + (i * 500)).toStringAsFixed(0)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö'
                    : messages[messageIndex];

            // –†–∞–∑–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
            final delay =
                status == 'analyzing'
                    ? Duration(milliseconds: 1000)
                    : Duration(milliseconds: 500);
            await Future.delayed(delay);

            yield ProgressMessage(
              taskId: request.taskId,
              progress: progress,
              status: status,
              message: message,
            );
          }

          _logger.info(
            '–°–µ—Ä–≤–µ—Ä: –ó–∞–¥–∞—á–∞ "${request.taskName}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
          );
        }).create();

    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º BidiStream –≤ ServerStreamingBidiStream
    final serverStream =
        ServerStreamingBidiStream<TaskRequest, ProgressMessage>(
          stream: bidiStream,
          sendFunction: bidiStream.send,
          closeFunction: bidiStream.close,
        );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç—Ä–∏–º
    serverStream.sendRequest(request);

    return serverStream;
  }
}

class ClientTaskService extends TaskServiceContract {
  final RpcEndpoint endpoint;

  ClientTaskService(this.endpoint);

  @override
  ServerStreamingBidiStream<TaskRequest, ProgressMessage> handler(
    TaskRequest request,
  ) {
    return endpoint
        .serverStreaming(
          serviceName: serviceName,
          methodName: TaskServiceContract.methodName,
        )
        .call<TaskRequest, ProgressMessage>(
          request: request,
          responseParser: ProgressMessage.fromJson,
        );
  }
}

/// –ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
void printHeader(String title) {
  _logger.info('-------------------------');
  _logger.info(' $title');
  _logger.info('-------------------------');
}

/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
String _getStatusIcon(String status) {
  switch (status) {
    case 'initializing':
      return 'üîÑ';
    case 'in_progress':
      return 'üîπ';
    case 'processing':
      return 'üîß';
    case 'analyzing':
      return 'üîç';
    case 'completed':
      return '‚úÖ';
    default:
      return 'üìä';
  }
}

/// –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
String _buildProgressBar(int percent) {
  final barLength = 10;
  final filled = (barLength * percent / 100).round();
  final empty = barLength - filled;
  return '[${'‚ñà' * filled}${' ' * empty}]';
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞—á–∏
Future<void> demonstrateTaskProgress(RpcEndpoint client) async {
  printHeader('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞');

  // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏
  final request = TaskRequest(
    taskId: 'data-proc-${DateTime.now().millisecondsSinceEpoch}',
    taskName: '–ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö',
    steps: 10,
  );

  _logger.info(
    'üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É "${request.taskName}" (ID: ${request.taskId})',
  );
  _logger.info('–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');

  // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
  final stream = client
      .serverStreaming(serviceName: 'TaskService', methodName: 'startTask')
      .call<TaskRequest, ProgressMessage>(
        request: request,
        responseParser: ProgressMessage.fromJson,
      );

  try {
    _logger.info('–ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
    _logger.info('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    await for (final progress in stream) {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      final progressBar = _buildProgressBar(progress.progress);
      final statusIcon = _getStatusIcon(progress.status);

      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏–º –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
      _logger.info(
        '‚îÇ $statusIcon $progressBar ${progress.progress.toString().padLeft(3)}% ‚îÇ',
      );

      if (progress.status == 'completed') {
        _logger.info('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        _logger.info('–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:');

        _logger.info('  ‚Ä¢ ID –∑–∞–¥–∞—á–∏: ${progress.taskId}');
        _logger.info('  ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${DateTime.now().toString()}');
        _logger.info('  ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${progress.message}');
      }
    }
  } catch (e) {
    _logger.error(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π',
      error: {'error': e.toString()},
    );
  }
}
