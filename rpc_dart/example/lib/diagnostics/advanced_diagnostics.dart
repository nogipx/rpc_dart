// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:math' as math;
import 'package:rpc_dart/diagnostics.dart';

/// –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ª–æ–≥–≥–µ—Ä–æ–º –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
Future<void> main({bool debug = true}) async {
  print('\n=== –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ RPC ===\n');

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  RpcLoggerSettings.setDefaultMinLogLevel(RpcLoggerLevel.debug);

  // –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  final logger = DefaultRpcLogger(
    'DiagnosticsDemo',
    coloredLoggingEnabled: true,
    logColors: RpcLoggerColors(
      debug: AnsiColor.cyan,
      info: AnsiColor.brightGreen,
      warning: AnsiColor.brightYellow,
      error: AnsiColor.brightRed,
      critical: AnsiColor.magenta,
    ),
  );

  logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');

  try {
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ—Å—Ç–æ–π —É—Ç–∏–ª–∏—Ç—ã
    logger.info('–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');

    final metrics = <String, List<int>>{};

    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    await measureOperation('fast_operation', metrics, () async {
      await Future.delayed(Duration(milliseconds: 10));
    });

    await measureOperation('medium_operation', metrics, () async {
      await Future.delayed(Duration(milliseconds: 100));
    });

    await measureOperation('slow_operation', metrics, () async {
      await Future.delayed(Duration(milliseconds: 300));
    });

    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    for (int i = 0; i < 5; i++) {
      await measureOperation('fast_operation', metrics, () async {
        await Future.delayed(
          Duration(milliseconds: 10 + math.Random().nextInt(20)),
        );
      });

      await measureOperation('medium_operation', metrics, () async {
        await Future.delayed(
          Duration(milliseconds: 100 + math.Random().nextInt(50)),
        );
      });

      await measureOperation('slow_operation', metrics, () async {
        await Future.delayed(
          Duration(milliseconds: 300 + math.Random().nextInt(100)),
        );
      });
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    logger.info('–ê–Ω–∞–ª–∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');

    for (final entry in metrics.entries) {
      final opName = entry.key;
      final timings = entry.value;

      final minValue = timings.reduce((a, b) => math.min(a, b));
      final maxValue = timings.reduce((a, b) => math.max(a, b));
      final avg = timings.reduce((a, b) => a + b) / timings.length;
      final p95 = calculatePercentile(timings, 95);

      logger.info(
        'üìä –û–ø–µ—Ä–∞—Ü–∏—è: $opName',
        data: {
          '–∑–∞–ø—É—Å–∫–æ–≤': timings.length,
          '–º–∏–Ω (–º—Å)': minValue,
          '–º–∞–∫—Å (–º—Å)': maxValue,
          '—Å—Ä (–º—Å)': avg.toStringAsFixed(2),
          'p95 (–º—Å)': p95,
        },
      );
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    logger.info('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫');

    final errorLogger = RpcLogger('ErrorHandler');

    try {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
      await executeWithPotentialError();
    } catch (e, stack) {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      errorLogger.error(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
        error: e,
        stackTrace: stack,
        context: 'UserService.login',
        data: {
          'user_id': '12345',
          'session_id': generateSessionId(),
          'timestamp': DateTime.now().toIso8601String(),
          'client_info': {
            'platform': 'iOS',
            'version': '15.2',
            'device': 'iPhone 13 Pro',
          },
        },
      );

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
      logger.info(
        '–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏:',
        data: {
          '—Ç–∏–ø_–æ—à–∏–±–∫–∏': e.runtimeType.toString(),
          '—Å–æ–æ–±—â–µ–Ω–∏–µ': e.toString(),
          '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É',
          '–∫–æ–¥_–æ—à–∏–±–∫–∏': 'ERR_CONNECTION_FAILED',
        },
      );
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
    logger.info('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤');

    final traceId = generateTraceId();
    final traceLogger = RpcLogger('Trace');

    traceLogger.info(
      '–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞',
      data: {'trace_id': traceId, 'request_id': generateRequestId()},
    );

    // –ò–º–∏—Ç–∞—Ü–∏—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
    await executeWithTracing(traceId, traceLogger, 1);

    traceLogger.info(
      '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞',
      data: {'trace_id': traceId, 'status': 'success', 'duration_ms': 1500},
    );
  } catch (e, stack) {
    logger.error(
      '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ',
      error: e,
      stackTrace: stack,
    );
  }

  print('\n=== –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω ===\n');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

/// –ò–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
Future<void> measureOperation(
  String operationName,
  Map<String, List<int>> metrics,
  Future<void> Function() operation,
) async {
  final logger = RpcLogger('Performance');

  // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
  final stopwatch = Stopwatch()..start();

  // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
  await operation();

  // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–º–µ—Ä
  stopwatch.stop();
  final elapsedMs = stopwatch.elapsedMilliseconds;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  metrics.putIfAbsent(operationName, () => []).add(elapsedMs);

  logger.debug('–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è $operationName –∑–∞ $elapsedMs–º—Å');
}

/// –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å –¥–ª—è –º–∞—Å—Å–∏–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π
int calculatePercentile(List<int> values, int percentile) {
  if (values.isEmpty) return 0;
  if (values.length == 1) return values.first;

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞
  final sortedValues = List<int>.from(values)..sort();

  // –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è
  final n = (sortedValues.length - 1) * percentile / 100;
  final k = n.floor();
  final d = n - k;

  // –ï—Å–ª–∏ k+1 –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  if (k >= sortedValues.length - 1) return sortedValues.last;

  // –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
  return (sortedValues[k] + d * (sortedValues[k + 1] - sortedValues[k]))
      .round();
}

/// –ò–º–∏—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π
Future<void> executeWithPotentialError() async {
  await Future.delayed(Duration(milliseconds: 200));
  throw StateError('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
String generateSessionId() {
  final random = math.Random();
  return 'sess_${DateTime.now().millisecondsSinceEpoch}_${random.nextInt(10000)}';
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
String generateRequestId() {
  final random = math.Random();
  return 'req_${random.nextInt(1000000).toString().padLeft(6, '0')}';
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
String generateTraceId() {
  final random = math.Random();
  final timestamp = DateTime.now().millisecondsSinceEpoch;
  return 'trace_${timestamp}_${random.nextInt(1000000).toString().padLeft(6, '0')}';
}

/// –ò–º–∏—Ç–∏—Ä—É–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
Future<void> executeWithTracing(
  String traceId,
  RpcLogger logger,
  int depth,
) async {
  final serviceName =
      ['AuthService', 'UserService', 'DatabaseService', 'CacheService'][depth %
          4];
  final methodName = ['validate', 'getProfile', 'query', 'fetch'][depth % 4];

  logger.debug(
    '[$depth] –í—ã–∑–æ–≤ $serviceName.$methodName',
    data: {
      'trace_id': traceId,
      'depth': depth,
      'service': serviceName,
      'method': methodName,
    },
  );

  // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
  await Future.delayed(Duration(milliseconds: 100));

  if (depth < 3) {
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    await executeWithTracing(traceId, logger, depth + 1);
  }

  logger.debug(
    '[$depth] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ $serviceName.$methodName',
    data: {
      'trace_id': traceId,
      'depth': depth,
      'service': serviceName,
      'method': methodName,
      'duration_ms': 100 + (depth < 3 ? 300 : 0),
    },
  );
}
