// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:io';
import 'package:rpc_dart/rpc_dart.dart';
import 'package:rpc_dart/diagnostics.dart';

const String _source = 'DiagnosticsExample';

/// –ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
///
/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
/// - –ù–∞—Å—Ç—Ä–æ–π–∫—É –æ–ø—Ü–∏–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
/// - –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
/// - –°–±–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ—Ç—Ä–∏–∫
/// - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
Future<void> main({bool debug = true}) async {
  printHeader('–ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –¥–ª—è RPC
  final clientTransport = MemoryTransport('client');
  final serverTransport = MemoryTransport('server');

  // –°–æ–µ–¥–∏–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
  clientTransport.connect(serverTransport);
  serverTransport.connect(clientTransport);
  RpcLog.info(message: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω—ã', source: _source);

  // –°–æ–∑–¥–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
  final clientEndpoint = RpcEndpoint(
    transport: clientTransport,
    debugLabel: 'client',
  );
  final serverEndpoint = RpcEndpoint(
    transport: serverTransport,
    debugLabel: 'server',
  );

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º middlewares –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  if (debug) {
    clientEndpoint.addMiddleware(DebugMiddleware(id: 'client'));
    serverEndpoint.addMiddleware(DebugMiddleware(id: 'server'));
  }

  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä
    RpcLog.info(
      message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...',
      source: _source,
    );
    final serverContract = setupDiagnosticServer(serverEndpoint);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç
    RpcLog.info(
      message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...',
      source: _source,
    );
    final diagnosticClient = await setupDiagnosticClient(clientEndpoint, debug);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è RpcLog
    RpcLog.setDiagnosticService(diagnosticClient);
    RpcLog.info(
      message: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è RpcLog',
      source: _source,
    );

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫
    await demonstrateDiagnostics(diagnosticClient);

    // –û—Ç–∫–ª—é—á–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç –æ—Ç RpcLog
    RpcLog.setDefaultSource(_source);

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    await clientEndpoint.close();
    await serverEndpoint.close();
  } catch (e, stack) {
    RpcLog.error(
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
      source: _source,
      error: {'error': e.toString()},
      stackTrace: stack.toString(),
    );
  }

  printHeader('–ü—Ä–∏–º–µ—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
}

/// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
DiagnosticServerContract setupDiagnosticServer(RpcEndpoint endpoint) {
  // –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
  final serverContract = DiagnosticServerContract(
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    onSendMetrics: (metrics) {
      print('–ü–æ–ª—É—á–µ–Ω–æ ${metrics.length} –º–µ—Ç—Ä–∏–∫ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞');
    },
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ—Ç—Ä–∏–∫
    onTraceEvent: (metric) {
      print('–ü–æ–ª—É—á–µ–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏: ${metric.content.method}');
    },
    onLatencyMetric: (metric) {
      print(
        '–ü–æ–ª—É—á–µ–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏: ${metric.content.operation} (${metric.content.durationMs}ms)',
      );
    },
    onStreamMetric: (metric) {
      print(
        '–ü–æ–ª—É—á–µ–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ —Å—Ç—Ä–∏–º–∞: ${metric.content.streamId} (${metric.content.eventType})',
      );
    },
    onErrorMetric: (metric) {
      print('üî¥ –ü–æ–ª—É—á–µ–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ –æ—à–∏–±–∫–∏: ${metric.content.message}');
    },
    onResourceMetric: (metric) {
      print('–ü–æ–ª—É—á–µ–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤');
    },
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–æ–≤ - –æ—Ç–∫–ª—é—á–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å,
    // —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –≤—ã–≤–æ–¥—è—Ç—Å—è —á–µ—Ä–µ–∑ RpcLog –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞
    onLog: (logMetric) {
      // –ù–µ –≤—ã–≤–æ–¥–∏–º –ª–æ–≥–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      // –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    },
    onStreamLogs: (logStream) {
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ—Ç–æ–∫ –ª–æ–≥–æ–≤, –Ω–æ –Ω–µ –≤—ã–≤–æ–¥–∏–º –∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ
      logStream.listen((logMetric) {
        // –õ–æ–≥–∏ —É–∂–µ –≤—ã–≤–æ–¥—è—Ç—Å—è —á–µ—Ä–µ–∑ RpcLog –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞
      });
    },
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
    onRegisterClient: (clientIdentity) {
      print('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª–∏–µ–Ω—Ç: ${clientIdentity.clientId}');
    },
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    onPing: () async {
      print('–ü–æ–ª—É—á–µ–Ω ping –∑–∞–ø—Ä–æ—Å');
      return true;
    },
  );

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ
  endpoint.registerServiceContract(serverContract);

  return serverContract;
}

/// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
Future<IRpcDiagnosticService> setupDiagnosticClient(
  RpcEndpoint endpoint,
  bool debug,
) async {
  // –°–æ–∑–¥–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
  final clientIdentity = RpcClientIdentity(
    clientId: 'example-client-${DateTime.now().millisecondsSinceEpoch}',
    traceId: 'trace-${DateTime.now().millisecondsSinceEpoch}',
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
    appVersion: '1.0.0',
    platform: Platform.operatingSystem,
    properties: {
      'applicationName': 'ExampleApp',
      'sessionId': 'session-${DateTime.now().millisecondsSinceEpoch}',
    },
  );

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ü–∏–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  final options = DiagnosticOptions(
    // –í–∫–ª—é—á–∞–µ–º —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
    enabled: true,
    // –°–æ–±–∏—Ä–∞–µ–º 100% –º–µ—Ç—Ä–∏–∫ (–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω—å—à–µ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏)
    samplingRate: 1.0,
    // –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    maxBufferSize: 50,
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    flushIntervalMs: 3000,
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    minLogLevel: debug ? RpcLogLevel.debug : RpcLogLevel.info,
    // –í—ã–≤–æ–¥–∏—Ç—å –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    consoleLoggingEnabled: true,
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–æ–≤ —Å–æ–±–∏—Ä–∞–µ–º—ã—Ö –º–µ—Ç—Ä–∏–∫
    traceEnabled: true,
    latencyEnabled: true,
    streamMetricsEnabled: true,
    errorMetricsEnabled: true,
    resourceMetricsEnabled: true,
    loggingEnabled: true,
  );

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  final diagnosticClient = RpcDiagnosticService(
    endpoint: endpoint,
    clientIdentity: clientIdentity,
    options: options,
    // –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä ID
    // idGenerator: () => 'custom-id-${DateTime.now().microsecondsSinceEpoch}',
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  final connected = await diagnosticClient.ping();
  RpcLog.info(
    message:
        '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${connected ? "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" : "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"}',
    source: _source,
  );

  return diagnosticClient;
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
Future<void> demonstrateDiagnostics(IRpcDiagnosticService diagnostics) async {
  printHeader('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞');

  // 1. –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  RpcLog.info(
    message: '1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
    source: _source,
  );

  RpcLog.debug(message: '–≠—Ç–æ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', source: _source);
  RpcLog.info(message: '–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', source: _source);
  RpcLog.warning(message: '–≠—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', source: _source);
  RpcLog.error(
    message: '–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ',
    source: _source,
    error: {'code': 500, 'reason': '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞'},
  );

  // 2. –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
  RpcLog.info(
    message: '2. –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π',
    source: _source,
  );

  // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
  final result = await diagnostics.measureLatency(
    operation: () async {
      // –ò–º–∏—Ç–∞—Ü–∏—è –¥–æ–ª–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
      RpcLog.debug(message: '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ª–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏...', source: _source);
      await Future.delayed(Duration(milliseconds: 500));
      return '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏';
    },
    operationName: 'long_calculation',
    operationType: RpcLatencyOperationType.methodCall,
    method: 'demonstrateDiagnostics',
    service: 'DiagnosticsExample',
  );

  RpcLog.info(message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏: $result', source: _source);

  // 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
  RpcLog.info(message: '3. –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞', source: _source);

  final streamId = 'demo-stream-${DateTime.now().millisecondsSinceEpoch}';

  // –ú–µ—Ç—Ä–∏–∫–∞ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–∏–º–∞
  await diagnostics.reportStreamMetric(
    diagnostics.createStreamMetric(
      streamId: streamId,
      direction: RpcStreamDirection.clientToServer,
      eventType: RpcStreamEventType.created,
      method: 'streamDemo',
    ),
  );

  // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∏–º–∞
  RpcLog.debug(message: '–ú–æ–¥–µ–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å–æ —Å—Ç—Ä–∏–º–æ–º...', source: _source);
  await Future.delayed(Duration(milliseconds: 300));

  // –ú–µ—Ç—Ä–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  await diagnostics.reportStreamMetric(
    diagnostics.createStreamMetric(
      streamId: streamId,
      direction: RpcStreamDirection.clientToServer,
      eventType: RpcStreamEventType.messageReceived,
      method: 'streamDemo',
      dataSize: 1024,
      messageCount: 5,
    ),
  );

  // –ú–µ—Ç—Ä–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∏–º–∞
  await diagnostics.reportStreamMetric(
    diagnostics.createStreamMetric(
      streamId: streamId,
      direction: RpcStreamDirection.clientToServer,
      eventType: RpcStreamEventType.closed,
      method: 'streamDemo',
      duration: 300,
    ),
  );

  // 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ –æ—à–∏–±–æ–∫
  RpcLog.info(message: '4. –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ –æ—à–∏–±–æ–∫', source: _source);

  try {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    throw Exception('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ');
  } catch (e, stack) {
    // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É –æ—à–∏–±–∫–∏
    await diagnostics.reportErrorMetric(
      diagnostics.createErrorMetric(
        errorType: RpcErrorMetricType.unexpectedError,
        message: e.toString(),
        code: 500,
        method: 'demonstrateDiagnostics',
        stackTrace: stack.toString(),
        details: {'location': 'errorDemo', 'severity': 'high'},
      ),
    );
  }

  // 5. –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
  RpcLog.info(message: '5. –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤', source: _source);

  await diagnostics.reportResourceMetric(
    diagnostics.createResourceMetric(
      memoryUsage: 1024 * 1024 * 100, // 100 –ú–ë (–ø—Ä–∏–º–µ—Ä)
      cpuUsage: 0.15, // 15%
      activeConnections: 5,
      activeStreams: 2,
      requestsPerSecond: 10.5,
      networkInBytes: 1024 * 500,
      networkOutBytes: 1024 * 300,
      additionalMetrics: {'customMetric': 42, 'appState': 'running'},
    ),
  );

  // 6. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
  RpcLog.info(
    message: '6. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä',
    source: _source,
  );
  await diagnostics.flush();

  // –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  await Future.delayed(Duration(seconds: 1));
}

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
void printHeader(String title) {
  RpcLog.info(message: '-------------------------', source: _source);
  RpcLog.info(message: ' $title', source: _source);
  RpcLog.info(message: '-------------------------', source: _source);
}
