// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'package:rpc_dart/rpc_dart.dart';
import 'package:rpc_dart/diagnostics.dart';

const String _source = 'LoggingExample';

/// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
///
/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤ —Å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏,
/// –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–≤, –∞ —Ç–∞–∫–∂–µ –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞–º–∏.
Future<void> main() async {
  print('–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ RpcDart\n');

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  RpcLogManager.setDefaultMinLogLevel(RpcLogLevel.debug);

  // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  final apiLogger = RpcLogManager.get('API');
  final dbLogger = RpcLogManager.get('Database');
  final uiLogger = RpcLogManager.get('UI');

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–æ–≥–≥–µ—Ä –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
  apiLogger.setLogColors(
    const RpcLogColors(info: AnsiColor.cyan, error: AnsiColor.brightRed),
  );

  dbLogger.setFilter(CustomLogFilter());

  uiLogger.setLogColors(
    const RpcLogColors(
      debug: AnsiColor.blue,
      info: AnsiColor.brightGreen,
      warning: AnsiColor.brightYellow,
    ),
  );

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–≥–µ—Ä–∞–º–∏
  print('=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ª–æ–≥–≥–µ—Ä–∞–º–∏ ===');
  await apiLogger.info(message: 'API –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
  await dbLogger.debug(message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  await dbLogger.warning(message: '–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  await uiLogger.info(message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

  try {
    throw Exception('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API');
  } catch (e, stackTrace) {
    await apiLogger.error(
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É',
      error: {'exception': e.toString()},
      stackTrace: stackTrace.toString(),
    );
  }

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
  print('\n=== –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ ===');
  final customLogger = RpcLogManager.createLogger(
    name: 'CustomLogger',
    minLogLevel: RpcLogLevel.warning,
    formatter: CustomLogFormatter(),
  );

  await customLogger.debug(message: '–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è');
  await customLogger.warning(
    message: '–≠—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ',
  );
  await customLogger.error(message: '–û—à–∏–±–∫–∞ –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ');

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  print('\n=== –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===');
  RpcLogManager.setDefaultMinLogLevel(RpcLogLevel.warning);
  RpcLogManager.setGlobalFormatter(TimestampOnlyFormatter());

  await apiLogger.debug(message: '–≠—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ');
  await apiLogger.warning(
    message: '–≠—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ',
  );

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–∞—Ö
  print('\n=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–∞—Ö ===');
  final loggerNames = RpcLogManager.getLoggerNames();
  print('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã: ${loggerNames.join(', ')}');

  print('\n–ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
}

/// –ü—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –ª–æ–≥–æ–≤
class CustomLogFilter implements LogFilter {
  @override
  bool shouldLog(RpcLogLevel level, String source) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Database, –∫—Ä–æ–º–µ debug —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
    if (source == 'Database' && level == RpcLogLevel.debug) {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∏–ª—å—Ç—Ä–µ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
      return true;
    }

    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ —É—Ä–æ–≤–Ω—é
    return level.index >= RpcLogLevel.info.index;
  }
}

/// –ü—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ –ª–æ–≥–æ–≤
class CustomLogFormatter implements LogFormatter {
  @override
  String format(
    DateTime timestamp,
    RpcLogLevel level,
    String source,
    String message, {
    String? context,
  }) {
    final emoji = _getEmojiForLevel(level);
    final levelName = level.name.toUpperCase().padRight(7);
    final time = '${timestamp.hour}:${timestamp.minute}:${timestamp.second}';

    return '„Äê$time„Äë$emoji [$levelName] $source: $message';
  }

  String _getEmojiForLevel(RpcLogLevel level) {
    switch (level) {
      case RpcLogLevel.debug:
        return 'üîç';
      case RpcLogLevel.info:
        return '‚ÑπÔ∏è';
      case RpcLogLevel.warning:
        return '‚ö†Ô∏è';
      case RpcLogLevel.error:
        return 'üö®';
      case RpcLogLevel.critical:
        return 'üíÄ';
      default:
        return 'üìù';
    }
  }
}

/// –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
class TimestampOnlyFormatter implements LogFormatter {
  @override
  String format(
    DateTime timestamp,
    RpcLogLevel level,
    String source,
    String message, {
    String? context,
  }) {
    final time = '${timestamp.hour}:${timestamp.minute}:${timestamp.second}';
    return '[$time] $message';
  }
}
