// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:typed_data';
import 'package:rpc_dart/rpc_dart.dart';
import 'client_streaming_contract.dart';
import 'client_streaming_models.dart';

const String _source = 'ClientStreamingExample';
late final RpcLogger _logger;

/// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
Future<void> runClientStreamingExample({bool debug = false}) async {
  // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
  _logger = RpcLogger(_source);

  printHeader('–ü—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ RPC');

  // –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  final serverTransport = MemoryTransport('server');
  final clientTransport = MemoryTransport('client');

  // –°–æ–µ–¥–∏–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –º–µ–∂–¥—É —Å–æ–±–æ–π
  serverTransport.connect(clientTransport);
  clientTransport.connect(serverTransport);
  _logger.info('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω—ã');

  try {
    // –°–æ–∑–¥–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
    final serverEndpoint = RpcEndpoint(
      transport: serverTransport,
      debugLabel: 'server',
    );

    final clientEndpoint = RpcEndpoint(
      transport: clientTransport,
      debugLabel: 'client',
    );

    // –î–æ–±–∞–≤–ª—è–µ–º middleware –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
    if (debug) {
      serverEndpoint.addMiddleware(DebugMiddleware(RpcLogger("server")));
      clientEndpoint.addMiddleware(DebugMiddleware(RpcLogger("client")));
    } else {
      serverEndpoint.addMiddleware(LoggingMiddleware());
      clientEndpoint.addMiddleware(LoggingMiddleware());
    }

    _logger.info('–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é —á–∞—Å—Ç—å
    final serverService = ServerStreamService();
    serverEndpoint.registerServiceContract(serverService);
    _logger.info('–°–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —á–∞—Å—Ç—å
    final clientService = ClientStreamService(clientEndpoint);
    clientEndpoint.registerServiceContract(clientService);
    _logger.info('–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Å –æ–±—ã—á–Ω—ã–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º
    await demonstrateFileUpload(clientService);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    await demonstrateFileUploadWithoutResponse(clientService);
  } catch (error, trace) {
    _logger.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', error: error, stackTrace: trace);
    _logger.info('–ó–∞–∫—Ä—ã–≤–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã...');
  } finally {
    await serverTransport.close();
    _logger.info('–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã');
  }

  printHeader('–ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —á–∞—Å—Ç—è–º–∏
Future<void> demonstrateFileUpload(ClientStreamService clientService) async {
  printHeader('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —á–∞—Å—Ç—è–º–∏');

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º–∏—Ç–∞—Ü–∏—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞)
  _logger.info('üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  final fileData = List.generate(
    10,
    (i) => DataBlock(
      index: i,
      data: _generateData(100000, i).toList(), // 100 KB –Ω–∞ –±–ª–æ–∫
      metadata:
          'filename=test_file.dat;mime=application/octet-stream;chunkSize=100000',
    ),
  );

  int totalSize = 0;
  for (final block in fileData) {
    totalSize += block.data.length;
  }

  try {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    _logger.info('üîÑ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞...');
    final uploadStream = clientService.processDataBlocks();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ —Ñ–∞–π–ª–∞
    _logger.info('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —á–∞—Å—Ç—è–º–∏...');

    for (final block in fileData) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫ –≤ –ø–æ—Ç–æ–∫–µ
      uploadStream.send(block);
      _logger.info(
        'üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–ª–æ–∫ #${block.index}: ${block.data.length} –±–∞–π—Ç',
      );
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (—ç—Ç–æ —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–µ—Ä—É, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã)
    _logger.info('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ ($totalSize –±–∞–π—Ç)');
    await uploadStream.finishSending();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏
    _logger.info('üîí –ö–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫—Ä—ã—Ç');
    await uploadStream.close();

    _logger.info('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
  } catch (e) {
    _logger.error(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞',
      error: {'error': e.toString()},
    );
  }
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —á–∞—Å—Ç—è–º–∏ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
Future<void> demonstrateFileUploadWithoutResponse(
  ClientStreamService clientService,
) async {
  printHeader('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞');

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º–∏—Ç–∞—Ü–∏—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞)
  _logger.info('üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  final fileData = List.generate(
    5,
    (i) => DataBlock(
      index: i,
      data: _generateData(50000, i).toList(), // 50 KB –Ω–∞ –±–ª–æ–∫
      metadata:
          'filename=test_file_no_response.dat;mime=application/octet-stream;chunkSize=50000',
    ),
  );

  int totalSize = 0;
  for (final block in fileData) {
    totalSize += block.data.length;
  }

  try {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    _logger.info(
      'üîÑ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞...',
    );
    final uploadStream = clientService.processDataBlocksNoResponse();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ —Ñ–∞–π–ª–∞
    _logger.info('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —á–∞—Å—Ç—è–º–∏...');

    for (final block in fileData) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫ –≤ –ø–æ—Ç–æ–∫–µ
      uploadStream.send(block);
      _logger.info(
        'üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–ª–æ–∫ #${block.index}: ${block.data.length} –±–∞–π—Ç',
      );
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (—ç—Ç–æ —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–µ—Ä—É, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã)
    _logger.info('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ ($totalSize –±–∞–π—Ç)');
    await uploadStream.finishSending();

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫
    _logger.info('üîí –ö–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫—Ä—ã—Ç');
    await uploadStream.close();

    _logger.info('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞!');
  } catch (e) {
    _logger.error(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞',
      error: {'error': e.toString()},
    );
  }
}

/// –ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
void printHeader(String title) {
  _logger.info('-------------------------');
  _logger.info(' $title');
  _logger.info('-------------------------');
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
Uint8List _generateData(int size, int seed) {
  final data = Uint8List(size);
  for (var i = 0; i < size; i++) {
    data[i] = (i + seed) % 256;
  }
  return data;
}

/// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
Future<void> main({bool debug = false}) async {
  await runClientStreamingExample(debug: debug);
}
