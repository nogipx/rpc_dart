// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:typed_data';
import 'dart:math' show min;
import 'package:rpc_dart/rpc_dart.dart';
import 'client_streaming_contract.dart';
import 'client_streaming_models.dart';

const String _source = 'ClientStreamingExample';
late final RpcLogger _logger;

/// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
Future<void> main({bool debug = false}) async {
  await runClientStreamingExample(debug: debug);
}

/// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
Future<void> runClientStreamingExample({bool debug = false}) async {
  // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
  _logger = RpcLogger(_source);
  RpcLoggerSettings.setDefaultMinLogLevel(RpcLoggerLevel.debug);

  printHeader('–ü—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ RPC');

  // –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  final serverTransport = MemoryTransport('server');
  final clientTransport = MemoryTransport('client');

  // –°–æ–µ–¥–∏–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –º–µ–∂–¥—É —Å–æ–±–æ–π
  serverTransport.connect(clientTransport);
  clientTransport.connect(serverTransport);
  _logger.info('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω—ã');

  RpcEndpoint? serverEndpoint;
  RpcEndpoint? clientEndpoint;

  try {
    // –°–æ–∑–¥–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
    serverEndpoint = RpcEndpoint(
      transport: serverTransport,
      debugLabel: 'server',
    );

    clientEndpoint = RpcEndpoint(
      transport: clientTransport,
      debugLabel: 'client',
    );

    // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –≤—Å–µ–≥–¥–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    final serverLogger = RpcLogger("server");
    final clientLogger = RpcLogger("client");
    serverEndpoint.addMiddleware(DebugMiddleware(serverLogger));
    clientEndpoint.addMiddleware(DebugMiddleware(clientLogger));

    _logger.info('–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é —á–∞—Å—Ç—å
    final serverService = ServerStreamService();
    serverEndpoint.registerServiceContract(serverService);
    _logger.info('–°–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —á–∞—Å—Ç—å
    final clientService = ClientStreamService(clientEndpoint);
    clientEndpoint.registerServiceContract(clientService);
    _logger.info('–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Å –æ–±—ã—á–Ω—ã–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º
    await demonstrateSimpleFileUpload(clientService);

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    _logger.info('‚úÖ –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...');
    await Future.delayed(Duration(seconds: 1));

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —Ä–µ—Å—É—Ä—Å—ã
    await clientEndpoint.close();
    _logger.info('–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –∑–∞–∫—Ä—ã—Ç');

    await serverEndpoint.close();
    _logger.info('–°–µ—Ä–≤–µ—Ä–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –∑–∞–∫—Ä—ã—Ç');

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
    await clientTransport.close();
    await serverTransport.close();
    _logger.info('–í—Å–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã');
  } catch (error, trace) {
    _logger.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', error: error, stackTrace: trace);
  }

  printHeader('–ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —á–∞—Å—Ç—è–º–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
Future<void> demonstrateSimpleFileUpload(
  ClientStreamService clientService,
) async {
  printHeader('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º–∏—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞)
  _logger.info('üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  final fileData = List.generate(
    2, // –ò—Å–ø–æ–ª—å–∑—É–µ–º 2 –±–ª–æ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    (i) => DataBlock(
      index: i,
      data: _generateData(500, i).toList(), // –ë–ª–æ–∫–∏ –ø–æ 500 –±–∞–π—Ç
      metadata:
          'filename=test_file.dat;mime=application/octet-stream;chunkSize=500',
    ),
  );

  int totalSize = 0;
  for (final block in fileData) {
    totalSize += block.data.length;
  }

  _logger.info(
    'üìä –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: $totalSize –±–∞–π—Ç –≤ ${fileData.length} –±–ª–æ–∫–∞—Ö',
  );

  ClientStreamingBidiStream<DataBlock, DataBlockResult>? uploadStream;
  bool isErrorEncountered = false;

  try {
    // –®–∞–≥ 1: –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    _logger.info('üîÑ –®–∞–≥ 1: –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞...');
    try {
      // –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
      uploadStream = clientService.processDataBlocksWithResponse();
      _logger.info(
        '‚úÖ –ö–∞–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: active = ${!uploadStream.isClosed}, closed = ${uploadStream.isClosed}',
      );
    } catch (e) {
      if (e.toString().contains('Endpoint closed')) {
        _logger.info('‚ùó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª - —ç–Ω–¥–ø–æ–∏–Ω—Ç –∑–∞–∫—Ä—ã—Ç');
        isErrorEncountered = true;
        return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –º–µ—Ç–æ–¥, –µ—Å–ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –∑–∞–∫—Ä—ã—Ç
      } else {
        rethrow;
      }
    }

    // –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    if (!isErrorEncountered) {
      _logger.info(
        'üì§ –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ (${fileData.length} —à—Ç.)...',
      );

      for (final block in fileData) {
        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –±–ª–æ–∫–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Å—Ç—Ä–∏–º
          uploadStream.send(block);
          _logger.info(
            'üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–ª–æ–∫ #${block.index}: ${block.data.length} –±–∞–π—Ç',
          );
          // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
          await Future.delayed(Duration(milliseconds: 20));
        } catch (e) {
          if (e.toString().contains('Endpoint closed')) {
            _logger.info('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–ª–æ–∫–∞ - —ç–Ω–¥–ø–æ–∏–Ω—Ç –∑–∞–∫—Ä—ã—Ç');
            isErrorEncountered = true;
            break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
          } else {
            rethrow;
          }
        }
      }

      if (!isErrorEncountered) {
        _logger.info('‚úÖ –í—Å–µ –±–ª–æ–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
      }
    }

    // –®–∞–≥ 3: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if (!isErrorEncountered) {
      _logger.info('üèÅ –®–∞–≥ 3: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞...');
      _logger.info(
        '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ finishSending: active = ${!uploadStream.isClosed}, closed = ${uploadStream.isClosed}',
      );

      try {
        await uploadStream.finishSending();
        _logger.info(
          '‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: active = ${!uploadStream.isClosed}, closed = ${uploadStream.isClosed}',
        );
      } catch (e) {
        if (e.toString().contains('Endpoint closed')) {
          _logger.info('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ - —ç–Ω–¥–ø–æ–∏–Ω—Ç –∑–∞–∫—Ä—ã—Ç');
          isErrorEncountered = true;
        } else {
          rethrow;
        }
      }
    }

    // –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - –°–†–ê–ó–£ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    if (!isErrorEncountered) {
      _logger.info('üì• –®–∞–≥ 4: –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...');
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —ç—Ç–æ –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –ø–æ–ª—É—á–µ–Ω
        // –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—à–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ - –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –¥–æ –≤—ã–∑–æ–≤–∞ getResponse()
        DataBlockResult? response;

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—é _wasResponseProcessed
        try {
          // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
          response = await uploadStream.getResponse();
          _logger.info('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ: $response');
        } catch (e) {
          _logger.info(
            '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –±—É–¥–µ–º –∂–¥–∞—Ç—å —Å —Ç–∞–π–º–∞—É—Ç–æ–º: ${e.toString().substring(0, min(50, e.toString().length))}...',
          );

          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–æ 3 —Å–µ–∫—É–Ω–¥
          response = await uploadStream.getResponse().timeout(
            Duration(seconds: 3),
            onTimeout: () {
              _logger.error('‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (3 —Å–µ–∫)');
              isErrorEncountered = true;
              throw TimeoutException('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞');
            },
          );
        }

        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å null
        if (response != null) {
          _logger.info('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: $response');
        } else {
          _logger.info('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (null)');
        }

        // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª—é–±—ã—Ö —Ç–∞–π–º–∞—É—Ç–æ–≤
        _logger.info('üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞...');
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–ª–∞–≥–∞ isClosed
        try {
          await uploadStream.close();
          _logger.info('‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç');
        } catch (e) {
          _logger.info(
            '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–∞–Ω–∞–ª–∞: ${e.toString().substring(0, min(50, e.toString().length))}...',
          );
        }
      } catch (e) {
        final errorMessage = e.toString().substring(
          0,
          min(e.toString().length, 100),
        );

        if (e is TimeoutException) {
          _logger.info('‚è±Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç: $errorMessage...');
        } else {
          _logger.info('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç: $errorMessage...');
        }

        if (e.toString().contains('Endpoint closed')) {
          _logger.info(
            'üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö',
          );
          isErrorEncountered = true;
        } else {
          isErrorEncountered = true;
        }

        // –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —Å—Ç—Ä–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        try {
          await uploadStream.close();
          _logger.info('‚úÖ –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞');
        } catch (closeError) {
          _logger.info(
            '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–∞–Ω–∞–ª–∞: ${closeError.toString().substring(0, min(50, closeError.toString().length))}...',
          );
        }
      }
    }

    // –®–∞–≥ 5: –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å—Ç—Ä–∏–º–∞ –£–ë–†–ê–ù–ê, —Ç–∞–∫ –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤—ã—à–µ
    // –ò –∑–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∏–º–∞ –£–ë–†–ê–ù–û, –ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤—ã—à–µ
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è

    if (isErrorEncountered) {
      _logger.info('‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
    } else {
      _logger.info('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    }
  } catch (e, stack) {
    _logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞', error: e, stackTrace: stack);

    // –í —Å–ª—É—á–∞–µ –æ–±—â–µ–π –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —Ä–µ—Å—É—Ä—Å—ã
    if (uploadStream != null && !uploadStream.isClosed) {
      try {
        await uploadStream.close();
        _logger.info('üîß –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
      } catch (closeError) {
        if (closeError.toString().contains('Endpoint closed')) {
          _logger.debug(
            '–≠–Ω–¥–ø–æ–∏–Ω—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–∞–Ω–∞–ª–∞',
          );
        } else {
          _logger.debug(
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –æ–±—â–µ–π –æ—à–∏–±–∫–∏: $closeError',
          );
        }
      }
    }
  }
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —á–∞—Å—Ç—è–º–∏
Future<void> demonstrateFileUpload(ClientStreamService clientService) async {
  printHeader('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —á–∞—Å—Ç—è–º–∏');

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º–∏—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞)
  _logger.info('üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  final fileData = List.generate(
    2, // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 2 –±–ª–æ–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    (i) => DataBlock(
      index: i,
      data: _generateData(500, i).toList(), // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 500 –±–∞–π—Ç –Ω–∞ –±–ª–æ–∫
      metadata:
          'filename=test_file.dat;mime=application/octet-stream;chunkSize=500',
    ),
  );

  int totalSize = 0;
  for (final block in fileData) {
    totalSize += block.data.length;
  }

  try {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    _logger.info('üîÑ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞...');
    final uploadStream = clientService.processDataBlocksWithResponse();
    _logger.info(
      'Stream —Å–æ–∑–¥–∞–Ω, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: isTransferFinished=${uploadStream.isClosed}, isClosed=${uploadStream.isClosed}',
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ —Ñ–∞–π–ª–∞
    _logger.info('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —á–∞—Å—Ç—è–º–∏...');

    for (final block in fileData) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫ –≤ –ø–æ—Ç–æ–∫–µ
      _logger.info(
        '–û—Ç–ø—Ä–∞–≤–∫–∞ –±–ª–æ–∫–∞ #${block.index}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∏–º–∞: isTransferFinished=${uploadStream.isClosed}, isClosed=${uploadStream.isClosed}',
      );
      uploadStream.send(block);
      _logger.info(
        'üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–ª–æ–∫ #${block.index}: ${block.data.length} –±–∞–π—Ç',
      );
      // –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      await Future.delayed(Duration(milliseconds: 50));
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (—ç—Ç–æ —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–µ—Ä—É, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã)
    _logger.info('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ ($totalSize –±–∞–π—Ç)');
    _logger.info(
      '–í—ã–∑—ã–≤–∞—é finishSending(), —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ: isTransferFinished=${uploadStream.isClosed}, isClosed=${uploadStream.isClosed}',
    );

    // –í–ê–ñ–ù–û! –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
    // 1. –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    await uploadStream.finishSending();
    _logger.info(
      'finishSending() –≤—ã–ø–æ–ª–Ω–µ–Ω, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ: isTransferFinished=${uploadStream.isClosed}, isClosed=${uploadStream.isClosed}',
    );

    // 2. –ñ–¥–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –ø–∞—É–∑—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–º
    await Future.delayed(Duration(milliseconds: 100));

    // 3. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    _logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...');

    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
      final response = await uploadStream.getResponse();
      _logger.info('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: $response');

      // –ü–†–ê–í–ò–õ–¨–ù–û: –∂–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
      // —ç—Ç–æ –¥–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–æ–º
      await Future.delayed(Duration(milliseconds: 100));

      // 4. –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏
      _logger.info(
        'üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ: isTransferFinished=${uploadStream.isClosed}, isClosed=${uploadStream.isClosed}',
      );

      await uploadStream.close();
      _logger.info(
        'üîí –ö–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫—Ä—ã—Ç, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ: isTransferFinished=${uploadStream.isClosed}, isClosed=${uploadStream.isClosed}',
      );
    } catch (e) {
      _logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞', error: e);

      // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
      if (!uploadStream.isClosed) {
        try {
          await uploadStream.close();
          _logger.info('üîí –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
        } catch (closeError) {
          _logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–∞–Ω–∞–ª–∞', error: closeError);
        }
      }
    }

    _logger.info('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (e, stack) {
    _logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞', error: e, stackTrace: stack);
  }
}

/// –ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
void printHeader(String title) {
  _logger.info('-------------------------');
  _logger.info(' $title');
  _logger.info('-------------------------');
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
Uint8List _generateData(int size, int seed) {
  final data = Uint8List(size);
  for (var i = 0; i < size; i++) {
    data[i] = (i + seed) % 256;
  }
  return data;
}
