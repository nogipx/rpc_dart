// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'package:rpc_dart/diagnostics.dart';

import 'bidirectional/bidirectional.dart' as bidirectional;
import 'client_streaming/client_streaming.dart' as client_streaming;
import 'json_rpc/json_rpc_example.dart' as json_rpc;
import 'server_streaming/server_streaming.dart' as server_streaming;
import 'unary/unary.dart' as unary;
import 'diagnostics/diagnostics_example.dart' as diagnostics;

final _logger = RpcLogger('ExampleRunner');

/// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
Future<void> main(List<String> args) async {
  printHeader('RPC Dart Examples');

  if (args.isEmpty) {
    printHelp();
    return;
  }

  final example = args.first.toLowerCase();
  final debug = args.length > 1 && args[1] == '--debug';

  if (debug) {
    RpcLoggerSettings.setDefaultMinLogLevel(RpcLoggerLevel.debug);
    _logger.info('–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏');
  } else {
    RpcLoggerSettings.setDefaultMinLogLevel(RpcLoggerLevel.info);
    _logger.info('–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏');
  }

  try {
    switch (example) {
      case 'bidirectional':
      case 'bidi':
        await bidirectional.main(debug: debug);
        break;
      case 'client':
      case 'client-streaming':
        await client_streaming.main(debug: debug);
        break;
      case 'server':
      case 'server-streaming':
        await server_streaming.main(debug: debug);
        break;
      case 'unary':
        await unary.main(debug: debug);
        break;
      case 'json':
      case 'json-rpc':
        await json_rpc.main();
        break;
      case 'diagnostics':
      case 'diagnostic':
        await diagnostics.main(debug: debug);
        break;
      case 'all':
        await runAllExamples(debug);
        break;
      case 'help':
      default:
        printHelp();
    }
  } catch (e, stack) {
    _logger.error(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–∞',
      error: {'error': e.toString()},
      stackTrace: stack,
    );
  }
}

/// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
Future<void> runAllExamples(bool debug) async {
  printHeader('–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤');

  try {
    _logger.info('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ —É–Ω–∞—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤...');
    await unary.main(debug: debug);

    _logger.info('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ JSON-RPC...');
    await json_rpc.main();

    _logger.info('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞...');
    await client_streaming.main(debug: debug);

    _logger.info('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞...');
    await server_streaming.main(debug: debug);

    _logger.info('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞...');
    await bidirectional.main(debug: debug);

    _logger.info('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...');
    await diagnostics.main(debug: debug);

    _logger.info('‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
  } catch (e) {
    _logger.error(
      '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤',
      error: {'error': e.toString()},
    );
  }
}

/// –í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
void printHeader(String title) {
  _logger.info('-------------------------');
  _logger.info(' $title');
  _logger.info('-------------------------');
}

/// –í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
void printHelp() {
  printHeader('–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');

  _logger.info('–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:');

  final examples = [
    'unary - –ü—Ä–∏–º–µ—Ä —É–Ω–∞—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ (–æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å -> –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç)',
    'client - –ü—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–ø–æ—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ -> –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç)',
    'server - –ü—Ä–∏–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å -> –ø–æ—Ç–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤)',
    'bidi - –ü—Ä–∏–º–µ—Ä –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–ø–æ—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ <-> –ø–æ—Ç–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤)',
    'json - –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è JSON-RPC',
    'diagnostics - –ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
    'all - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ',
    'help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É',
  ];

  for (final example in examples) {
    _logger.info('  ‚Ä¢ $example');
  }

  _logger.info('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  _logger.info('dart run example/lib/module.dart <example> [--debug]');
  _logger.info('  --debug: –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏');
}
