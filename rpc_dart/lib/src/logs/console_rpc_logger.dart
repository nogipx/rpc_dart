// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

part of '_logs.dart';

typedef DefaultRpcLogger = _ConsoleRpcLogger;

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class _DefaultRpcLoggerFilter implements IRpcLoggerFilter {
  final RpcLoggerLevel minLogLevel;

  _DefaultRpcLoggerFilter(this.minLogLevel);

  @override
  bool shouldLog(RpcLoggerLevel level, String source) {
    return level.index >= minLogLevel.index;
  }
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
class _DefaultRpcLoggerFormatter implements IRpcLoggerFormatter {
  const _DefaultRpcLoggerFormatter();

  @override
  String format(
      DateTime timestamp, RpcLoggerLevel level, String source, String message,
      {String? context}) {
    final formattedTime =
        '${timestamp.hour.toString().padLeft(2, '0')}:${timestamp.minute.toString().padLeft(2, '0')}:${timestamp.second.toString().padLeft(2, '0')}';

    String prefix;
    switch (level) {
      case RpcLoggerLevel.debug:
        prefix = 'üîç DEBUG';
      case RpcLoggerLevel.info:
        prefix = 'üìù INFO ';
      case RpcLoggerLevel.warning:
        prefix = '‚ö†Ô∏è WARN ';
      case RpcLoggerLevel.error:
        prefix = '‚ùå ERROR';
      case RpcLoggerLevel.critical:
        prefix = 'üî• CRIT ';
      default:
        prefix = '     ';
    }

    final contextStr = context != null ? ' ($context)' : '';
    return '[$formattedTime] $prefix [$source$contextStr] $message';
  }
}

/// –ö–æ–Ω—Å–æ–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
class _ConsoleRpcLogger implements RpcLogger {
  @override
  final String name;

  /// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤
  final IRpcDiagnosticService? _diagnosticService;

  /// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  final RpcLoggerLevel _minLogLevel;

  /// –§–ª–∞–≥ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
  final bool _consoleLoggingEnabled;

  /// –§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
  final bool _coloredLoggingEnabled;

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  final RpcLoggerColors _logColors;

  /// –§–∏–ª—å—Ç—Ä –ª–æ–≥–æ–≤
  final IRpcLoggerFilter _filter;

  /// –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –ª–æ–≥–æ–≤
  final IRpcLoggerFormatter _formatter;

  /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  _ConsoleRpcLogger(
    this.name, {
    IRpcDiagnosticService? diagnosticService,
    RpcLoggerLevel minLogLevel = RpcLoggerLevel.info,
    bool consoleLoggingEnabled = true,
    bool coloredLoggingEnabled = true,
    RpcLoggerColors logColors = const RpcLoggerColors(),
    IRpcLoggerFilter? filter,
    IRpcLoggerFormatter? formatter,
  })  : _diagnosticService = diagnosticService,
        _minLogLevel = minLogLevel,
        _consoleLoggingEnabled = consoleLoggingEnabled,
        _coloredLoggingEnabled = coloredLoggingEnabled,
        _logColors = logColors,
        _filter = filter ?? _DefaultRpcLoggerFilter(minLogLevel),
        _formatter = formatter ?? const _DefaultRpcLoggerFormatter();

  @override
  RpcLogger withConfig({
    IRpcDiagnosticService? diagnosticService,
    RpcLoggerLevel? minLogLevel,
    bool? consoleLoggingEnabled,
    bool? coloredLoggingEnabled,
    RpcLoggerColors? logColors,
    IRpcLoggerFilter? filter,
    IRpcLoggerFormatter? formatter,
  }) {
    return _ConsoleRpcLogger(
      name,
      diagnosticService: diagnosticService ?? _diagnosticService,
      minLogLevel: minLogLevel ?? _minLogLevel,
      consoleLoggingEnabled: consoleLoggingEnabled ?? _consoleLoggingEnabled,
      coloredLoggingEnabled: coloredLoggingEnabled ?? _coloredLoggingEnabled,
      logColors: logColors ?? _logColors,
      filter: filter ?? _filter,
      formatter: formatter ?? _formatter,
    );
  }

  @override
  Future<void> log({
    required RpcLoggerLevel level,
    required String message,
    String? context,
    String? requestId,
    Map<String, dynamic>? error,
    String? stackTrace,
    Map<String, dynamic>? data,
    AnsiColor? color,
  }) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!_filter.shouldLog(level, name)) {
      return;
    }

    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (_consoleLoggingEnabled) {
      _logToConsole(
        level: level,
        message: message,
        context: context,
        error: error,
        stackTrace: stackTrace,
        color: color,
      );
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (_diagnosticService != null) {
      await _diagnosticService!.log(
        level: level,
        message: message,
        source: name,
        context: context,
        requestId: requestId,
        error: error,
        stackTrace: stackTrace,
        data: data,
      );
    }
  }

  /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª–∏
  void _logToConsole({
    required RpcLoggerLevel level,
    required String message,
    String? context,
    Map<String, dynamic>? error,
    String? stackTrace,
    AnsiColor? color,
  }) {
    final timestamp = DateTime.now();
    final logMessage =
        _formatter.format(timestamp, level, name, message, context: context);

    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç
    if (_coloredLoggingEnabled) {
      final actualColor = color ?? _logColors.colorForLevel(level);
      RpcColoredLogging.logColored(
        logMessage,
        actualColor,
        isError: level.index >= RpcLoggerLevel.error.index,
      );

      if (error != null) {
        RpcColoredLogging.logColored(
          '  Error details: $error',
          actualColor,
          isError: true,
        );
      }

      if (stackTrace != null) {
        RpcColoredLogging.logColored(
          '  Stack trace: \n$stackTrace',
          actualColor,
          isError: true,
        );
      }
    } else {
      // –û–±—ã—á–Ω—ã–π –≤—ã–≤–æ–¥ –±–µ–∑ —Ü–≤–µ—Ç–∞
      print(logMessage);

      if (error != null) {
        print('  Error details: $error');
      }

      if (stackTrace != null) {
        print('  Stack trace: \n$stackTrace');
      }
    }
  }

  @override
  Future<void> debug({
    required String message,
    String? context,
    String? requestId,
    Map<String, dynamic>? data,
    AnsiColor? color,
  }) async {
    await log(
      level: RpcLoggerLevel.debug,
      message: message,
      context: context,
      requestId: requestId,
      data: data,
      color: color,
    );
  }

  @override
  Future<void> info({
    required String message,
    String? context,
    String? requestId,
    Map<String, dynamic>? data,
    AnsiColor? color,
  }) async {
    await log(
      level: RpcLoggerLevel.info,
      message: message,
      context: context,
      requestId: requestId,
      data: data,
      color: color,
    );
  }

  @override
  Future<void> warning({
    required String message,
    String? context,
    String? requestId,
    Map<String, dynamic>? data,
    AnsiColor? color,
  }) async {
    await log(
      level: RpcLoggerLevel.warning,
      message: message,
      context: context,
      requestId: requestId,
      data: data,
      color: color,
    );
  }

  @override
  Future<void> error({
    required String message,
    String? context,
    String? requestId,
    Map<String, dynamic>? error,
    String? stackTrace,
    Map<String, dynamic>? data,
    AnsiColor? color,
  }) async {
    await log(
      level: RpcLoggerLevel.error,
      message: message,
      context: context,
      requestId: requestId,
      error: error,
      stackTrace: stackTrace,
      data: data,
      color: color,
    );
  }

  @override
  Future<void> critical({
    required String message,
    String? context,
    String? requestId,
    Map<String, dynamic>? error,
    String? stackTrace,
    Map<String, dynamic>? data,
    AnsiColor? color,
  }) async {
    await log(
      level: RpcLoggerLevel.critical,
      message: message,
      context: context,
      requestId: requestId,
      error: error,
      stackTrace: stackTrace,
      data: data,
      color: color,
    );
  }
}
