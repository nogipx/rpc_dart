part of '../_index.dart';

/// Интерфейс для кодирования и декодирования сообщений.
///
/// Позволяет абстрагироваться от конкретного формата сериализации (JSON, Protocol Buffers,
/// MessagePack и др.). Реализации должны обеспечивать корректное преобразование объектов
/// в байты и обратно.
abstract class IRpcSerializer<T> {
  /// Сериализует объект типа T в последовательность байтов.
  ///
  /// [message] Объект для сериализации.
  /// Возвращает байтовое представление объекта.
  Uint8List serialize(T message);

  /// Десериализует последовательность байтов в объект типа T.
  ///
  /// [bytes] Байты для десериализации.
  /// Возвращает объект, воссозданный из байтов.
  T deserialize(Uint8List bytes);
}

/// Сообщение транспортного уровня.
///
/// Представляет различные типы сообщений, которые могут передаваться
/// через транспортный уровень, включая метаданные и полезную нагрузку.
final class RpcTransportMessage<T> {
  /// Полезная нагрузка сообщения (данные)
  final T? payload;

  /// Связанные метаданные
  final RpcMetadata? metadata;

  /// Флаг, указывающий, что это последнее сообщение в потоке
  final bool isEndOfStream;

  /// Флаг, указывающий, что сообщение содержит только метаданные
  bool get isMetadataOnly => metadata != null && payload == null;

  /// Создает сообщение транспортного уровня
  RpcTransportMessage({
    this.payload,
    this.metadata,
    this.isEndOfStream = false,
  });
}

/// Абстрактный интерфейс транспортного уровня.
///
/// Определяет контракт для транспортных реализаций различных протоколов
/// (HTTP/2, WebSockets, изоляты и др.). Абстрагирует детали конкретного
/// транспортного протокола от бизнес-логики gRPC.
abstract class IRpcTransport {
  /// Отправляет метаданные (заголовки или трейлеры в терминах HTTP/2).
  ///
  /// Используется для отправки:
  /// - Начальных метаданных запроса (клиент)
  /// - Начальных метаданных ответа (сервер)
  /// - Финальных метаданных (статус завершения)
  ///
  /// [metadata] Метаданные для отправки
  /// [endStream] Флаг завершения потока данных
  Future<void> sendMetadata(RpcMetadata metadata, {bool endStream = false});

  /// Отправляет сообщение через транспортный уровень.
  ///
  /// Используется для передачи бинарных данных сообщения.
  /// Транспорт должен обеспечить корректную фрагментацию и доставку
  /// сообщения независимо от его размера.
  ///
  /// [data] Байты для отправки
  /// [endStream] Флаг завершения потока данных
  Future<void> sendMessage(Uint8List data, {bool endStream = false});

  /// Поток входящих сообщений от удаленной стороны.
  ///
  /// Объединяет входящие метаданные и данные в единый поток RpcTransportMessage.
  /// Каждый элемент потока может быть:
  /// - Сообщение с данными
  /// - Сообщение с метаданными
  /// - Сообщение с флагом завершения (isEndOfStream)
  Stream<RpcTransportMessage<Uint8List>> get incomingMessages;

  /// Завершает отправку данных.
  ///
  /// Используется для сигнализации о завершении отправки сообщений.
  /// После вызова этого метода нельзя отправлять новые сообщения.
  Future<void> finishSending();

  /// Закрывает транспортное соединение.
  ///
  /// Освобождает все связанные ресурсы и закрывает базовое соединение.
  Future<void> close();
}
