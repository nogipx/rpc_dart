// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'package:rpc_dart/diagnostics.dart';

/// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ª—é–±–æ–π —á–∞—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
///
/// –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
/// –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å.
///
/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/// ```dart
/// import 'package:rpc_dart/diagnostics.dart';
///
/// void someFunction() {
///   RpcLog.debug(
///     message: '–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
///     source: 'MyComponent',
///   );
/// }
/// ```
class RpcLog {
  /// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤
  static IRpcDiagnosticService? _diagnosticService;

  /// –ò—Å—Ç–æ—á–Ω–∏–∫ –ª–æ–≥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  static String _defaultSource = 'RpcDart';

  /// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  static RpcLogLevel _minLogLevel = RpcLogLevel.info;

  /// –§–ª–∞–≥ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
  static bool _consoleLoggingEnabled = true;

  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  static void setDiagnosticService(IRpcDiagnosticService service) {
    _diagnosticService = service;
    _minLogLevel = service.options.minLogLevel;
    _consoleLoggingEnabled = service.options.consoleLoggingEnabled;
  }

  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –ª–æ–≥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  static void setDefaultSource(String source) {
    _defaultSource = source;
  }

  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
  static void setMinLogLevel(RpcLogLevel level) {
    _minLogLevel = level;
  }

  /// –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
  static void setConsoleLogging(bool enabled) {
    _consoleLoggingEnabled = enabled;
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –≤ —Å–µ—Ä–≤–∏—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  static Future<void> log({
    required RpcLogLevel level,
    required String message,
    String? source,
    String? context,
    String? requestId,
    Map<String, dynamic>? error,
    String? stackTrace,
    Map<String, dynamic>? data,
  }) async {
    final actualSource = source ?? _defaultSource;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    if (_consoleLoggingEnabled && level.index >= _minLogLevel.index) {
      _logToConsole(
        level: level,
        message: message,
        source: actualSource,
        context: context,
        error: error,
        stackTrace: stackTrace,
      );
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (_diagnosticService != null) {
      await _diagnosticService!.log(
        level: level,
        message: message,
        source: actualSource,
        context: context,
        requestId: requestId,
        error: error,
        stackTrace: stackTrace,
        data: data,
      );
    }
  }

  /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª–∏
  static void _logToConsole({
    required RpcLogLevel level,
    required String message,
    required String source,
    String? context,
    Map<String, dynamic>? error,
    String? stackTrace,
  }) {
    final timestamp = DateTime.now();
    final formattedTime =
        '${timestamp.hour.toString().padLeft(2, '0')}:${timestamp.minute.toString().padLeft(2, '0')}:${timestamp.second.toString().padLeft(2, '0')}';

    String prefix;
    switch (level) {
      case RpcLogLevel.debug:
        prefix = 'üîç DEBUG';
      case RpcLogLevel.info:
        prefix = 'üìù INFO ';
      case RpcLogLevel.warning:
        prefix = '‚ö†Ô∏è WARN ';
      case RpcLogLevel.error:
        prefix = '‚ùå ERROR';
      case RpcLogLevel.critical:
        prefix = 'üî• CRIT ';
      default:
        prefix = '     ';
    }

    final contextStr = context != null ? ' ($context)' : '';
    print('[$formattedTime] $prefix [$source$contextStr] $message');

    if (error != null) {
      print('  Error details: $error');
    }

    if (stackTrace != null) {
      print('  Stack trace: \n$stackTrace');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ —É—Ä–æ–≤–Ω—è debug
  static Future<void> debug({
    required String message,
    String? source,
    String? context,
    String? requestId,
    Map<String, dynamic>? data,
  }) async {
    await log(
      level: RpcLogLevel.debug,
      message: message,
      source: source,
      context: context,
      requestId: requestId,
      data: data,
    );
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ —É—Ä–æ–≤–Ω—è info
  static Future<void> info({
    required String message,
    String? source,
    String? context,
    String? requestId,
    Map<String, dynamic>? data,
  }) async {
    await log(
      level: RpcLogLevel.info,
      message: message,
      source: source,
      context: context,
      requestId: requestId,
      data: data,
    );
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ —É—Ä–æ–≤–Ω—è warning
  static Future<void> warning({
    required String message,
    String? source,
    String? context,
    String? requestId,
    Map<String, dynamic>? data,
  }) async {
    await log(
      level: RpcLogLevel.warning,
      message: message,
      source: source,
      context: context,
      requestId: requestId,
      data: data,
    );
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ —É—Ä–æ–≤–Ω—è error
  static Future<void> error({
    required String message,
    String? source,
    String? context,
    String? requestId,
    Map<String, dynamic>? error,
    String? stackTrace,
    Map<String, dynamic>? data,
  }) async {
    await log(
      level: RpcLogLevel.error,
      message: message,
      source: source,
      context: context,
      requestId: requestId,
      error: error,
      stackTrace: stackTrace,
      data: data,
    );
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ —É—Ä–æ–≤–Ω—è critical
  static Future<void> critical({
    required String message,
    String? source,
    String? context,
    String? requestId,
    Map<String, dynamic>? error,
    String? stackTrace,
    Map<String, dynamic>? data,
  }) async {
    await log(
      level: RpcLogLevel.critical,
      message: message,
      source: source,
      context: context,
      requestId: requestId,
      error: error,
      stackTrace: stackTrace,
      data: data,
    );
  }
}
