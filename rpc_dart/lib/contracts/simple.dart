import 'dart:async';
import 'dart:convert';
import 'dart:typed_data';
import 'base.dart';
import 'rpc_service_contract.dart';

/// ============================================
/// –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø - USER SERVICE
/// ============================================

/// üéØ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
/// IDE –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤!
/// –¢–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—ã–π - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –õ–Æ–ë–´–ï —Ç–∏–ø—ã!
abstract class UserServiceContract extends RpcServiceContract {
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–º–µ–Ω –º–µ—Ç–æ–¥–æ–≤
  static const methodGetUser = 'getUser';
  static const methodCreateUser = 'createUser';
  static const methodListUsers = 'listUsers';
  static const methodWatchUsers = 'watchUsers';

  UserServiceContract() : super('UserService');

  @override
  void setup() {
    // üéØ –î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –≤ DSL —Å—Ç–∏–ª–µ!
    // –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –õ–Æ–ë–´–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–∏–ø—ã!
    addUnaryMethod<GetUserRequest, UserResponse>(
      methodName: methodGetUser,
      handler: getUser,
      description: '–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID',
      metadata: const RpcMethodMetadata(
        timeout: Duration(seconds: 5),
        cacheable: true,
      ),
    );

    addUnaryMethod<CreateUserRequest, UserResponse>(
      methodName: methodCreateUser,
      handler: createUser,
      description: '–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      metadata: const RpcMethodMetadata(
        requiresAuth: true,
        permissions: ['user.create'],
      ),
    );

    addServerStreamMethod<ListUsersRequest, UserResponse>(
      methodName: methodListUsers,
      handler: listUsers,
      description: '–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Ç–æ–∫–æ–º',
      metadata: const RpcMethodMetadata(
        timeout: Duration(seconds: 30),
      ),
    );

    addBidirectionalMethod<WatchUsersRequest, UserEventResponse>(
      methodName: methodWatchUsers,
      handler: watchUsers,
      description: '–ù–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      metadata: const RpcMethodMetadata(
        requiresAuth: true,
        permissions: ['user.watch'],
        timeout: Duration(minutes: 30),
      ),
    );

    super.setup();
  }

  /// üéØ IDE –ø–æ–∫–∞–∂–µ—Ç –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Ç–∏—Ö –º–µ—Ç–æ–¥–æ–≤!
  /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  Future<UserResponse> getUser(GetUserRequest request);

  /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<UserResponse> createUser(CreateUserRequest request);

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Ç–æ–∫–æ–º
  Stream<UserResponse> listUsers(ListUsersRequest request);

  /// –ù–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Stream<UserEventResponse> watchUsers(Stream<WatchUsersRequest> requests);
}

/// ============================================
/// –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø
/// ============================================

/// –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
/// üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞!
class UserServiceClient extends UserServiceContract {
  final RpcEndpoint _endpoint;

  UserServiceClient(this._endpoint);

  @override
  Future<UserResponse> getUser(GetUserRequest request) {
    return _endpoint
        .unaryRequest(
          serviceName: serviceName,
          methodName: UserServiceContract.methodGetUser,
        )
        .call(
          request: request,
          responseParser: UserResponse.fromBuffer,
        );
  }

  @override
  Future<UserResponse> createUser(CreateUserRequest request) {
    return _endpoint
        .unaryRequest(
          serviceName: serviceName,
          methodName: UserServiceContract.methodCreateUser,
        )
        .call(
          request: request,
          responseParser: UserResponse.fromBuffer,
        );
  }

  @override
  Stream<UserResponse> listUsers(ListUsersRequest request) {
    return _endpoint
        .serverStream(
          serviceName: serviceName,
          methodName: UserServiceContract.methodListUsers,
        )
        .call(
          request: request,
          responseParser: UserResponse.fromBuffer,
        );
  }

  @override
  Stream<UserEventResponse> watchUsers(Stream<WatchUsersRequest> requests) {
    return _endpoint
        .bidirectionalStream(
          serviceName: serviceName,
          methodName: UserServiceContract.methodWatchUsers,
        )
        .call(
          requests: requests,
          responseParser: UserEventResponse.fromBuffer,
        );
  }
}

/// ============================================
/// –°–ï–†–í–ï–†–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø
/// ============================================

/// –°–µ—Ä–≤–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
/// üéØ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!
class UserServiceServer extends UserServiceContract {
  @override
  Future<UserResponse> getUser(GetUserRequest request) async {
    print('   üì• –°–µ—Ä–≤–µ—Ä: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å getUser(${request.userId})');

    if (request.userId == 999) {
      return UserResponse(
        user: null,
        isSuccess: false,
      );
    }

    final user = User(
      id: request.userId,
      name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${request.userId}',
      email: 'user${request.userId}@example.com',
    );

    return UserResponse(
      user: user,
    );
  }

  @override
  Future<UserResponse> createUser(CreateUserRequest request) async {
    print('   üì• –°–µ—Ä–≤–µ—Ä: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å createUser(${request.name})');

    final user = User(
      id: DateTime.now().millisecondsSinceEpoch % 10000,
      name: request.name,
      email: request.email,
    );

    return UserResponse(
      user: user,
    );
  }

  @override
  Stream<UserResponse> listUsers(ListUsersRequest request) async* {
    print('   üì• –°–µ—Ä–≤–µ—Ä: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å listUsers(limit: ${request.limit})');

    for (int i = 1; i <= request.limit; i++) {
      final user = User(
        id: i,
        name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $i',
        email: 'user$i@example.com',
      );

      yield UserResponse(
        user: user,
      );

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å—Ç—Ä–∏–º–∞
      await Future.delayed(Duration(milliseconds: 100));
    }
  }

  @override
  Stream<UserEventResponse> watchUsers(
    Stream<WatchUsersRequest> requests,
  ) async* {
    print('   üì• –°–µ—Ä–≤–µ—Ä: –ó–∞–ø—É—â–µ–Ω watchUsers');

    await for (final request in requests) {
      print('   üì° –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: ${request.userIds}');

      // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      for (final userId in request.userIds) {
        final event = UserEvent(
          userId: userId,
          eventType: 'USER_UPDATED',
          data: {
            'field': 'last_activity',
            'value': DateTime.now().toIso8601String()
          },
          timestamp: DateTime.now(),
        );

        yield UserEventResponse(
          event: event,
        );

        await Future.delayed(Duration(milliseconds: 200));
      }
    }
  }
}

/// ============================================
/// RPC-–°–û–í–ú–ï–°–¢–ò–ú–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –¢–ò–ü–´
/// ============================================

/// –î–æ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ä–µ–∞–ª–∏–∑—É–µ—Ç IRpcSerializableMessage
class GetUserRequest implements IRpcSerializableMessage {
  final int userId;

  GetUserRequest({required this.userId});

  /// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  bool isValid() => userId > 0;

  /// –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  @override
  Uint8List toBuffer() {
    final json = {'userId': userId};
    final jsonString = jsonEncode(json);
    return Uint8List.fromList(utf8.encode(jsonString));
  }

  static GetUserRequest fromBuffer(Uint8List bytes) {
    final jsonString = utf8.decode(bytes);
    final json = jsonDecode(jsonString) as Map<String, dynamic>;
    return GetUserRequest(userId: json['userId']);
  }
}

/// –î–æ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ä–µ–∞–ª–∏–∑—É–µ—Ç IRpcSerializableMessage
class CreateUserRequest implements IRpcSerializableMessage {
  final String name;
  final String email;

  CreateUserRequest({required this.name, required this.email});

  /// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  bool isValid() => name.trim().isNotEmpty && email.contains('@');

  @override
  Uint8List toBuffer() {
    final json = {'name': name, 'email': email};
    final jsonString = jsonEncode(json);
    return Uint8List.fromList(utf8.encode(jsonString));
  }

  static CreateUserRequest fromBuffer(Uint8List bytes) {
    final jsonString = utf8.decode(bytes);
    final json = jsonDecode(jsonString) as Map<String, dynamic>;
    return CreateUserRequest(name: json['name'], email: json['email']);
  }
}

class ListUsersRequest implements IRpcSerializableMessage {
  final int limit;
  final int offset;

  ListUsersRequest({this.limit = 10, this.offset = 0});

  bool isValid() => limit > 0 && offset >= 0;

  @override
  Uint8List toBuffer() {
    final json = {'limit': limit, 'offset': offset};
    final jsonString = jsonEncode(json);
    return Uint8List.fromList(utf8.encode(jsonString));
  }

  static ListUsersRequest fromBuffer(Uint8List bytes) {
    final jsonString = utf8.decode(bytes);
    final json = jsonDecode(jsonString) as Map<String, dynamic>;
    return ListUsersRequest(
      limit: json['limit'] ?? 10,
      offset: json['offset'] ?? 0,
    );
  }
}

class WatchUsersRequest implements IRpcSerializableMessage {
  final List<int> userIds;

  WatchUsersRequest({required this.userIds});

  bool isValid() => userIds.isNotEmpty;

  @override
  Uint8List toBuffer() {
    final json = {'userIds': userIds};
    final jsonString = jsonEncode(json);
    return Uint8List.fromList(utf8.encode(jsonString));
  }

  static WatchUsersRequest fromBuffer(Uint8List bytes) {
    final jsonString = utf8.decode(bytes);
    final json = jsonDecode(jsonString) as Map<String, dynamic>;
    return WatchUsersRequest(userIds: List<int>.from(json['userIds']));
  }
}

/// –î–æ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ - —Ä–µ–∞–ª–∏–∑—É–µ—Ç IRpcSerializableMessage
class UserResponse implements IRpcSerializableMessage {
  final User? user;
  final bool isSuccess;
  final String? errorMessage;

  const UserResponse({
    this.user,
    this.isSuccess = true,
    this.errorMessage,
  });

  @override
  Uint8List toBuffer() {
    final json = {
      'user': user?.toJson(),
      'isSuccess': isSuccess,
      'errorMessage': errorMessage,
    };
    final jsonString = jsonEncode(json);
    return Uint8List.fromList(utf8.encode(jsonString));
  }

  static UserResponse fromBuffer(Uint8List bytes) {
    final jsonString = utf8.decode(bytes);
    final json = jsonDecode(jsonString) as Map<String, dynamic>;
    return UserResponse(
      user: json['user'] != null ? User.fromJson(json['user']) : null,
      isSuccess: json['isSuccess'] ?? true,
      errorMessage: json['errorMessage'],
    );
  }

  // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å User.fromJson
  Map<String, dynamic> toJson() => {
        'user': user?.toJson(),
        'isSuccess': isSuccess,
        'errorMessage': errorMessage,
      };
}

class UserEventResponse implements IRpcSerializableMessage {
  final UserEvent event;
  final bool isSuccess;

  const UserEventResponse({required this.event, this.isSuccess = true});

  @override
  Uint8List toBuffer() {
    final json = {
      'event': event.toJson(),
      'isSuccess': isSuccess,
    };
    final jsonString = jsonEncode(json);
    return Uint8List.fromList(utf8.encode(jsonString));
  }

  static UserEventResponse fromBuffer(Uint8List bytes) {
    final jsonString = utf8.decode(bytes);
    final json = jsonDecode(jsonString) as Map<String, dynamic>;
    return UserEventResponse(
      event: UserEvent.fromJson(json['event']),
      isSuccess: json['isSuccess'] ?? true,
    );
  }
}

/// –î–æ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ä–µ–∞–ª–∏–∑—É–µ—Ç IRpcSerializableMessage
class User implements IRpcSerializableMessage {
  final int id;
  final String name;
  final String email;

  const User({
    required this.id,
    required this.name,
    required this.email,
  });

  @override
  Uint8List toBuffer() {
    final json = toJson();
    final jsonString = jsonEncode(json);
    return Uint8List.fromList(utf8.encode(jsonString));
  }

  static User fromBuffer(Uint8List bytes) {
    final jsonString = utf8.decode(bytes);
    final json = jsonDecode(jsonString) as Map<String, dynamic>;
    return User.fromJson(json);
  }

  Map<String, dynamic> toJson() => {
        'id': id,
        'name': name,
        'email': email,
      };

  static User fromJson(Map<String, dynamic> json) {
    return User(
      id: json['id'],
      name: json['name'],
      email: json['email'],
    );
  }
}

/// –î–æ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ–±—ã—Ç–∏—è - —Ä–µ–∞–ª–∏–∑—É–µ—Ç IRpcSerializableMessage
class UserEvent implements IRpcSerializableMessage {
  final int userId;
  final String eventType;
  final Map<String, dynamic> data;
  final DateTime timestamp;

  const UserEvent({
    required this.userId,
    required this.eventType,
    required this.data,
    required this.timestamp,
  });

  @override
  Uint8List toBuffer() {
    final json = toJson();
    final jsonString = jsonEncode(json);
    return Uint8List.fromList(utf8.encode(jsonString));
  }

  static UserEvent fromBuffer(Uint8List bytes) {
    final jsonString = utf8.decode(bytes);
    final json = jsonDecode(jsonString) as Map<String, dynamic>;
    return UserEvent.fromJson(json);
  }

  Map<String, dynamic> toJson() => {
        'userId': userId,
        'eventType': eventType,
        'data': data,
        'timestamp': timestamp.toIso8601String(),
      };

  static UserEvent fromJson(Map<String, dynamic> json) {
    return UserEvent(
      userId: json['userId'],
      eventType: json['eventType'],
      data: Map<String, dynamic>.from(json['data']),
      timestamp: DateTime.parse(json['timestamp']),
    );
  }
}

/// ============================================
/// –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –°–¢–†–û–ì–û–ì–û API
/// ============================================

void exampleUsage() async {
  // üéØ –¢–µ–ø–µ—Ä—å TypeScript-–ø–æ–¥–æ–±–Ω–∞—è —Å—Ç—Ä–æ–≥–æ—Å—Ç—å!
  // –í—Å–µ —Ç–∏–ø—ã –û–ë–Ø–ó–ê–ù–´ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å IRpcSerializableMessage

  // ‚úÖ –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è - GetUserRequest —Ä–µ–∞–ª–∏–∑—É–µ—Ç IRpcSerializableMessage
  final request = GetUserRequest(userId: 123);
  final buffer = request.toBuffer(); // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω!

  final response = UserResponse(
    user: User(id: 123, name: '–¢–µ—Å—Ç', email: 'test@example.com'),
  );
  final responseBuffer = response.toBuffer(); // –¢–æ–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω!

  print('‚úÖ –°—Ç—Ä–æ–≥–∏–π API —Ä–∞–±–æ—Ç–∞–µ—Ç!');
  print('Request buffer size: ${buffer.length}');
  print('Response buffer size: ${responseBuffer.length}');
}

/// –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
void clientUsageExample() async {
  // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å endpoint
  // final endpoint = RpcEndpoint(transport: someTransport);

  // üéØ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é - –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ!
  // final client = UserServiceClient(endpoint);

  // ‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º!
  // final user = await client.getUser(GetUserRequest(userId: 123));
  // final newUser = await client.createUser(CreateUserRequest(
  //   name: '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
  //   email: 'new@example.com',
  // ));

  // üî• IDE –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã: getUser, createUser, listUsers, watchUsers
  print('‚úÖ –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ - –Ω–∏–∫–∞–∫–∏—Ö –ª–∏—à–Ω–∏—Ö –º–µ—Ç–æ–¥–æ–≤!');
}
